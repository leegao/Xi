// A stub for a Xi CUP specification.

package cs4120.der34dlc287lg342.xi;

import edu.cornell.cs.cs4120.util.VisualizableTreeNode;
import edu.cornell.cs.cs4120.xi.AbstractSyntaxNode;
import edu.cornell.cs.cs4120.xi.CompilationException;
import edu.cornell.cs.cs4120.xi.lexer.Token;
import edu.cornell.cs.cs4120.xi.Position;
import cs4120.der34dlc287lg342.xi.ast.*;
import cs4120.der34dlc287lg342.xi.typechecker.XiPrimitiveType;
import cs4120.der34dlc287lg342.xi.typechecker.XiType;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

action code {:
	public Position span(Position left, Position right){
		return new XiPosition(left.unit(), left.columnStart(), right.columnEnd(), left.lineStart(), right.lineEnd());
	}
:};

parser code {:
	public void syntax_error(Symbol cur_token){
		Token t = (Token)cur_token.value;
		if (t != null)
			throw new CompilationException("Syntax Error: Not expecting token "+t.type()+"("+t.value()+")", t.position());
		else
			throw new CompilationException("Syntax Error: Not expecting EOF", new XiPosition(0,0,0,0));
	}
:};

// You might want to add types to these declarations.
terminal Token IDENTIFIER;
terminal Token STRING_LITERAL;
terminal Token CHARACTER_LITERAL;
terminal Token INTEGER_LITERAL;
terminal Token TRUE, FALSE;
terminal Token INT, BOOL;
terminal UMINUS, UNOT;

terminal Token IF, ELSE, WHILE, BREAK, RETURN, USE, LENGTH, PLUS, MINUS, TIMES,
  DIVIDE, MODULO, NOT, LT, LEQ, GT, GEQ, AND, OR, EQUAL, NOT_EQUAL, GETS,
  OPEN_BRACKET, CLOSE_BRACKET, OPEN_PAREN, CLOSE_PAREN, OPEN_BRACE, CLOSE_BRACE,
  COLON, COMMA, SEMICOLON, UNDERSCORE, CLASS, EXTENDS, NEW, THIS, PERIOD, NULL;

nonterminal AbstractSyntaxNode program;
// expr components
nonterminal AbstractSyntaxNode id;
// statement components
nonterminal AbstractSyntaxNode var_decl;
nonterminal VisualizableTreeNode dimension;
nonterminal String type;
nonterminal ArrayList<XiType> types;
nonterminal ArrayList<VisualizableTreeNode> bracket_list;
nonterminal ArrayList<VisualizableTreeNode> func_list;
nonterminal ArrayList<VisualizableTreeNode> varclass_list, class_block;
nonterminal ArrayList<IdNode> idclass_list;
// top level
nonterminal AbstractSyntaxNode func_decl;
nonterminal AbstractSyntaxNode class_decl, varclass_decl;


start with program;

id ::= IDENTIFIER:o
	{:  Token id = (Token)o;
		RESULT = new IdNode(id.value(), id.position());:};

type ::= INT:o {: RESULT = o.value(); :} | BOOL:o {: RESULT = o.value(); :}
		| id:id {: RESULT = ((IdNode)id).id; :};
		
dimension ::= | INTEGER_LITERAL:t 
	{:	String s = t.value();
		RESULT = new IntegerLiteralNode(Long.parseLong(s), t.position()); :};

var_decl ::= id:id COLON type:t bracket_list:arr
	{:	// check that arr is empty
		DeclNode decl = new DeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;:};
	
bracket_list ::= 
	{: RESULT = new ArrayList<VisualizableTreeNode>(); :}
	| bracket_list:arr OPEN_BRACKET dimension:t CLOSE_BRACKET 
	{: 	if (arr == null) arr = new ArrayList<VisualizableTreeNode>();
		arr.add(t);
		RESULT = arr; :}; 

	
func_list ::= 
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		RESULT = list; :}
	| var_decl:s 
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; :}
	| func_list:list COMMA var_decl:s
	{:	list.add(s);
		RESULT = list; :};

types ::= {: RESULT = new ArrayList<XiType>(); :}
	| COLON type:type bracket_list:dim
	{: RESULT = new ArrayList<XiType>(); RESULT.add(new XiType(type, dim)); :}
	| types:arr COMMA type:type bracket_list:dim
	{:	RESULT = arr;
		arr.add(new XiPrimitiveType(type, dim)); :}; 		

func_decl ::= id:id OPEN_PAREN func_list:list CLOSE_PAREN types:types
	{:	FuncDeclNode func_decl = new FuncDeclNode((IdNode)id, list, types, null, id.position());
		RESULT = func_decl; :};

class_decl ::= CLASS:c id:id OPEN_BRACE:t class_block:b CLOSE_BRACE:e
	{:
		ClassNode class_node = new ClassNode((IdNode)id, span(c.position(), e.position()));
		class_node.children.addAll(b);
		RESULT = class_node;
	:}
	| CLASS:c id:id EXTENDS id:ex OPEN_BRACE:t class_block:b CLOSE_BRACE:e
	{:
		ClassNode class_node = new ClassNode((IdNode)id, span(c.position(), e.position()));
		class_node.children.addAll(b);
		class_node.ex = (IdNode)ex;
		RESULT = class_node;
	:};
	
class_block ::= varclass_list:list
	{:
		RESULT = list;
	:}
	| func_decl:s
	{:
		ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list;
	:}
	| class_block:list varclass_list:decls
	{:
		list.addAll(decls);
		RESULT = list;
	:}
	| class_block:list func_decl:s
	{:
		list.add(s);
		RESULT = list;
	:};
	
varclass_list ::= varclass_decl:s 
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; :}
	| idclass_list:idlist COLON type:t bracket_list:arr
	{:	
		ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		for (IdNode id : idlist){
			list.add(new ClassDeclNode(id, t, arr, id.position()));
		}
		RESULT = list; :};
	
varclass_decl ::= id:id COLON type:t bracket_list:arr
	{:	// check that arr is empty
		ClassDeclNode decl = new ClassDeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;:};
		

		
idclass_list ::= id:id1 COMMA id:id2
	{:
		ArrayList<IdNode> list = new ArrayList<IdNode>();
		list.add((IdNode)id1);
		list.add((IdNode)id2);
		RESULT = list;
	:}
	| idclass_list:list COMMA id:id
	{:
		list.add((IdNode)id);
		RESULT = list;
	:};

program ::= func_decl:s
	{:	ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; :}
	| class_decl:s
	{:	ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; :}
	| program:p func_decl:s
	{:	ProgramNode program = (ProgramNode)p;
		program.add(s);
		program.position = span(p.position(), s.position());
		RESULT = program; :}
	| program:p class_decl:s
	{:	ProgramNode program = (ProgramNode)p;
		program.add(s);
		program.position = span(p.position(), s.position());
		RESULT = program; :};