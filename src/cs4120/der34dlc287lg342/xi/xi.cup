// A stub for a Xi CUP specification.

package cs4120.der34dlc287lg342.xi;

import edu.cornell.cs.cs4120.util.VisualizableTreeNode;
import edu.cornell.cs.cs4120.xi.AbstractSyntaxNode;
import edu.cornell.cs.cs4120.xi.CompilationException;
import edu.cornell.cs.cs4120.xi.lexer.Token;
import edu.cornell.cs.cs4120.xi.Position;
import cs4120.der34dlc287lg342.xi.ast.*;
import cs4120.der34dlc287lg342.xi.typechecker.XiType;
import cs4120.der34dlc287lg342.xi.typechecker.XiPrimitiveType;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import cs4120.der34dlc287lg342.xi.sym;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.lang.reflect.Field;

action code {:
	public Position span(Position left, Position right){
		return new XiPosition(left.unit(), left.columnStart(), right.columnEnd(), left.lineStart(), right.lineEnd());
	}
:};

parser code {:
	//NOTE: the two error functions are mutually exclusive  since syntax_error() is throwing exception!
	
	public void syntax_error(Symbol cur_token){
		Token t = (Token)cur_token.value;
		
		if (t != null){
			throw new CompilationException("Syntax Error: Not expecting token "+t.type()+"("+t.value()+")", t.position());
		}
		else
			throw new CompilationException("Syntax Error: Not expecting EOF", new XiPosition(0,0,0,0));
		
		
	}
	
	public void unrecovered_syntax_error(Symbol cur_token){
		Token t = (Token)cur_token.value;
		report_fatal_error("", t);	
	}

	public void report_fatal_error(String message, Object info){	
		Token t = (Token)info;
		if (t != null){
			throw new CompilationException("Syntax Error: Not expecting token "+t.type()+"("+t.value()+")", t.position());
		}
		else
			throw new CompilationException("Syntax Error: Not expecting EOF", new XiPosition(0,0,0,0));
	}

 	public void debug_message(String mess) {	
 		try{
		//modify default debug message to replace terminal id with token name
	 		if(mess.contains("term #")){
	 			Pattern p=Pattern.compile("([0-9]+)");
		 		Matcher m=p.matcher(mess);
		 		m.find();
		 		int tokid=Integer.parseInt(m.group(0));
		 		String tokname="debug mess error";
		 		for(Field tid : sym.class.getFields()){
		 			if(tid.getInt(tid)==tokid){
		 				tokname=tid.getName();
		 				break;
		 			}
		 		}
				String bettermess=mess.replaceFirst("#[0-9]+",tokname);
				System.err.println(bettermess);
	 		}
			else
	 			System.err.println(mess);
 		}
 		catch(Exception e){
 			System.err.println(mess);
 		}
		
		//System.err.println(mess);
	}
:};

// You might want to add types to these declarations.
terminal Token IDENTIFIER;
terminal Token STRING_LITERAL;
terminal Token CHARACTER_LITERAL;
terminal Token INTEGER_LITERAL;
terminal Token TRUE, FALSE;
terminal Token INT, BOOL,FINAL;
terminal UMINUS, UNOT;

terminal Token IF, ELSE, WHILE, BREAK, RETURN, USE, LENGTH, PLUS, MINUS, TIMES,
  DIVIDE, MODULO, NOT, LT, LEQ, GT, GEQ, AND, OR, EQUAL, NOT_EQUAL, GETS,
  OPEN_BRACKET, CLOSE_BRACKET, OPEN_PAREN, CLOSE_PAREN, OPEN_BRACE, CLOSE_BRACE,
  COLON, COMMA, SEMICOLON, UNDERSCORE,CLASS,EXTENDS,NEW,THIS,PERIOD,NULL;

nonterminal AbstractSyntaxNode program, use_list;
// expr components
<<<<<<< HEAD
nonterminal AbstractSyntaxTree expr, uop, func_call, expr_subset, 
	arr_index, arr_create, arr_elements, id, id_brackets, allowed_element_assign, usable_id;
// statement components
nonterminal AbstractSyntaxTree stmt, stmt_w_semi, if_stmt, while_stmt, return_stmt, return_list, 
	block, stmt_list, block_stmt, stmt_or_block, var_decl, var_inst, var_item, var_set;
nonterminal AbstractSyntaxTree dimension;
nonterminal String type;
nonterminal ArrayList<XiType> types;
nonterminal ArrayList<VisualizableTreeNode> bracket_list;
nonterminal ArrayList<VisualizableTreeNode> var_list, func_list, func_callargs;
nonterminal ArrayList<VisualizableTreeNode> varclass_list, class_block, gblvar_list;
nonterminal ArrayList<IdNode> idclass_list, gblid_list;

nonterminal AbstractSyntaxTree bool_literal, attr;
// top level
nonterminal AbstractSyntaxTree func_decl, use_stmt;
nonterminal AbstractSyntaxTree class_decl, varclass_decl, varclass_inst, gblvar_decl, gblvar_inst;
=======
nonterminal AbstractSyntaxNode expr, uop, func_call, 
	arr_index, arr_create, arr_elements, id, id_brackets, allowed_element_assign;
// statement components
nonterminal AbstractSyntaxNode stmt, stmt_w_semi, if_stmt, while_stmt, return_stmt, return_list, 
	block, stmt_list, block_stmt, stmt_or_block, var_decl,final_var_decl,final_var_init, var_inst, var_item, var_set;
nonterminal AbstractSyntaxNode dimension;
nonterminal String type, final_type;
nonterminal ArrayList<XiPrimitiveType> types;
nonterminal ArrayList<VisualizableTreeNode> bracket_list;
nonterminal ArrayList<VisualizableTreeNode> var_list, func_list, func_callargs;
nonterminal AbstractSyntaxNode bool_literal;
// top level
nonterminal AbstractSyntaxNode func_decl, use_stmt;
>>>>>>> finals

precedence nonassoc NEW;

precedence nonassoc OPEN_PAREN;
precedence nonassoc IF;
precedence nonassoc ELSE; // we want to shift else rather than reduce on if
precedence nonassoc SEMICOLON;
precedence nonassoc UNDERSCORE;

precedence left OR;
precedence left AND;
precedence left EQUAL, NOT_EQUAL;
precedence left LT, LEQ, GT, GEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULO;
precedence nonassoc UMINUS, UNOT;

precedence nonassoc OPEN_BRACKET;
precedence nonassoc PERIOD;

start with program;

bool_literal ::= TRUE:b {: RESULT = new BoolLiteralNode(true, ((Token)b).position()); :} 
	| FALSE:b {: RESULT = new BoolLiteralNode(false, ((Token)b).position()); :};

id ::= IDENTIFIER:o
	{:  Token id = (Token)o;
		RESULT = new IdNode(id.value(), id.position());:};
	
<<<<<<< HEAD
usable_id ::= id:id
	{: RESULT = id; :}
	| THIS:t
	{: RESULT = new ThisNode(t.position()); :};
	
expr_subset ::= func_call:a
	| arr_index:a
	| usable_id:a
	| NEW:n id:id
	| OPEN_PAREN expr CLOSE_PAREN
	;
/*	
attr ::= func_call:a PERIOD id:b
	| arr_index:a PERIOD id:b
	| usable_id:a PERIOD id:b
	| attr:a PERIOD id:b
	| NEW:n id:id PERIOD id:b
	| OPEN_PAREN expr CLOSE_PAREN PERIOD id:b
	{: RESULT = new AttrNode(a, b, span(a.position(), b.position())); :};
	*/
	

attr ::= expr:a PERIOD id:b
	{: RESULT = new AttrNode(a, b, span(a.position(), b.position())); :};
=======
>>>>>>> finals

expr ::= expr:e1 AND expr:e2 {: RESULT = new BoolOpNode("AND");
      ((BoolOpNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	| expr:e1 OR expr:e2 {: RESULT = new BoolOpNode("OR");
      ((BoolOpNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	
	| expr:e1 EQUAL expr:e2 {: RESULT = new EqualityNode("EQUAL");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	| expr:e1 NOT_EQUAL expr:e2 {: RESULT = new EqualityNode("NOT_EQUAL");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	| expr:e1 LEQ expr:e2 {: RESULT = new EqualityNode("LEQ");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	| expr:e1 GEQ expr:e2 {: RESULT = new EqualityNode("GEQ");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	| expr:e1 LT expr:e2 {: RESULT = new EqualityNode("LT");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	| expr:e1 GT expr:e2 {: RESULT = new EqualityNode("GT");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	
	| expr:e1 PLUS expr:e2 {: RESULT = new BinNode("PLUS");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	| expr:e1 MINUS expr:e2 {: RESULT = new BinNode("MINUS");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	| expr:e1 TIMES expr:e2 {: RESULT = new BinNode("TIMES");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	| expr:e1 DIVIDE expr:e2 {: RESULT = new BinNode("DIVIDE");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	| expr:e1 MODULO expr:e2 {: RESULT = new BinNode("MODULO");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); :}
	
	| NOT:t expr:e {: RESULT = new UnNotNode(t.position()); ((UnNotNode)RESULT).set(e, span(RESULT.position(), e.position())); :} 
	%prec UNOT
	| MINUS:t expr:e {: RESULT = new UnNegNode(t.position()); ((UnNegNode)RESULT).set(e, span(RESULT.position(), e.position())); :}
	%prec UMINUS
	
	/*| uop:op expr:e
	{:	RESULT = op; 
		if (op instanceof UnNegNode)
			((UnNegNode)op).set(e, span(op.position(), e.position())); 
		else
			((UnNotNode)op).set(e, span(op.position(), e.position()));
		:}*/
	
	| func_call:e
	{: RESULT = e; :}
	
	| INTEGER_LITERAL:o
	{: 	Token tok = (Token)o;
		long v = Long.parseLong(tok.value());
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p); :}
		
	| CHARACTER_LITERAL:o
	{: 	Token tok = (Token)o;
		int v = (int)(tok.value().charAt(0));
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p);:}
		
	| STRING_LITERAL:s
	{:	Token tok = (Token)s;
		Position p = tok.position();
		RESULT = new StringLiteralNode(tok.value(), p); :}
	 
	| bool_literal:b
	{: RESULT = b; :}
	
	| arr_index:e
	{: RESULT = e; :}
	
	| arr_create:e
	{: RESULT = e; :}
	
<<<<<<< HEAD
	| NULL:t
	{: RESULT = new NullNode(t.position());:}
	
	| usable_id:e
=======
	| id:e
>>>>>>> finals
	{: RESULT = e; :}
	
	| attr:attr
	{: RESULT = attr; :}
	
	| attr:attr OPEN_PAREN func_callargs:args CLOSE_PAREN:t
	{: RESULT = new FuncCallNode(attr, args, span(attr.position(), t.position())); :}
	
	
	
	| NEW:n id:id
	{: RESULT = new NewNode((IdNode)id, span(n.position(), id.position())); :}
	
	| OPEN_PAREN expr:expr CLOSE_PAREN
	{: RESULT = expr; :};
	
uop ::= NOT:t {: RESULT = new UnNotNode(t.position());  :} 
	%prec UNOT
	| MINUS:t {: RESULT = new UnNegNode(t.position()); :}
	%prec UMINUS;

func_call ::= id:id OPEN_PAREN func_callargs:args CLOSE_PAREN:o
	{:	Token t = (Token)o;
		RESULT = new FuncCallNode(id, args, span(id.position(), t.position())); :}
	| LENGTH:len OPEN_PAREN expr:expr CLOSE_PAREN:o
	{:	Token t1 = (Token)len, t2 = (Token)o;
		RESULT = new LengthNode(expr, span(t1.position(), t2.position())); :};
func_callargs ::= {: RESULT = new ArrayList<VisualizableTreeNode>(); :}
	| expr:expr {: ArrayList<VisualizableTreeNode> args = new ArrayList<VisualizableTreeNode>(); args.add(expr); RESULT = args; :}
	| func_callargs:args COMMA expr:expr
	{: args.add(expr); RESULT = args; :};

arr_index ::= expr:expr OPEN_BRACKET expr:i CLOSE_BRACKET:t
	{: RESULT = new ListIndexNode(expr, i, span(expr.position(), t.position())); :};
arr_create ::= OPEN_PAREN:o CLOSE_PAREN:e 
	{: Token t = (Token)o, t2 = (Token)e; RESULT = new ListNode(span(o.position(), e.position())); :}
	| OPEN_PAREN:o expr:expr COMMA CLOSE_PAREN:e
	{:  Token t = (Token)o, t2 = (Token)e; 
		ListNode list = new ListNode(span(o.position(), e.position())); 
		list.add(expr);
		RESULT = list;:}
	| OPEN_PAREN:o expr:expr COMMA arr_elements:arr CLOSE_PAREN:e
	{:  Token t = (Token)o, t2 = (Token)e; 
		ListNode list = new ListNode(span(o.position(), e.position())); 
		list.add(expr);
		RESULT = list;
		ListNode tl = (ListNode)arr;
		for (VisualizableTreeNode n : tl.children()) list.add((AbstractSyntaxNode)n);:};
arr_elements ::= expr:expr 
	{: ListNode list = new ListNode(expr.position()); list.add(expr); RESULT = list; :}
	| arr_elements:arr COMMA expr:expr
	{: ((ListNode)arr).add(expr); RESULT = arr; :};
	
	
stmt ::= if_stmt:s
	{: RESULT = s; :}
	| while_stmt:s
	{: RESULT = s; :}
	| BREAK:b
	{: RESULT = new BreakNode(b.position()); :}
	| func_call:e
	{: RESULT = new ProcedureCallNode(e); :}
	| block:b
	{: RESULT = b; :}
	|  final_var_init:s
	{: RESULT = s; :}
	|  var_decl:s
	{: RESULT = s; :}
	| var_inst:s
	{: RESULT = s; :}
	| var_set:s
	{: RESULT = s; :}
	;

stmt_or_block ::= stmt:stmt
	{: RESULT = stmt; :}
	| block:stmt
	{: RESULT = stmt; :};

stmt_w_semi ::= stmt:stmt
	{: RESULT = stmt; :}
	| stmt:stmt SEMICOLON
	{: RESULT = stmt; :};

if_stmt ::= IF:t OPEN_PAREN expr:e1 CLOSE_PAREN stmt_w_semi:stmt
    {: RESULT = new IfNode(e1, stmt, null, span(t.position(), stmt.position())); :}
	| IF:t OPEN_PAREN expr:e CLOSE_PAREN stmt_w_semi:s1 ELSE stmt_w_semi:s2
	{: RESULT = new IfNode(e, s1, s2, span(t.position(), s2.position())); :}
	;
while_stmt ::= WHILE:t OPEN_PAREN expr:e CLOSE_PAREN stmt:s
	{: RESULT = new WhileNode(e, s, span(t.position(), s.position())); :};
return_stmt ::= RETURN:t return_list:s 
	{:	ReturnNode r = (ReturnNode)s; 
		r.position = span(t.position(), s.position()); 
		RESULT = r; :}
	| RETURN:t 
	{:  ReturnNode r = new ReturnNode(); 
		r.position = t.position(); 
		RESULT = r; :}
	| return_stmt:s SEMICOLON {: RESULT = s; :};

return_list ::= expr:expr
	{:	ReturnNode r = new ReturnNode();
		r.add(expr);
		r.position = expr.position();
		RESULT = r; :}
	| return_list:list COMMA expr:expr
	{:	ReturnNode r = (ReturnNode)list;
		r.add(expr); 
		r.position = span(r.position, expr.position());
		RESULT = r; :};
/* a block of statemens*/
block ::= OPEN_BRACE:t CLOSE_BRACE:e
	{: RESULT = new BlockNode(span(t.position(), e.position())); :}
	| OPEN_BRACE:t return_stmt:s CLOSE_BRACE:e
	{: RESULT = new BlockNode(span(t.position(), e.position())); 
	   ((BlockNode)RESULT).add(s); :}
	| OPEN_BRACE:t stmt_list:stmts CLOSE_BRACE:e
	{:	BlockNode block = (BlockNode)stmts;
		block.position = span(t.position(), e.position()); 
		RESULT = block; :}
	| OPEN_BRACE:t stmt_list:stmts return_stmt:s CLOSE_BRACE:e
	{:	BlockNode block = (BlockNode)stmts;
		block.position = span(t.position(), e.position()); 
		block.add(s);
		RESULT = block; :};
/*a statement ending with or without semicolon*/
block_stmt ::= stmt:s {: RESULT = s; :} | stmt:s SEMICOLON {: RESULT = s; :};
/*a list of statements*/
stmt_list ::= block_stmt:s 
	{:	BlockNode block = new BlockNode(null);
		block.add(s);
		RESULT = block; :}
	| stmt_list:list block_stmt:s
	{:	BlockNode block = (BlockNode)list;
		block.add(s);
		RESULT = block; :};

type ::= INT:o {: RESULT = o.value(); :} 
	| BOOL:o {: RESULT = o.value(); :};

dimension ::= | expr:o {: RESULT = o; :};

var_decl ::= id:id COLON type:t bracket_list:arr
	{:	// check that arr is empty
		DeclNode decl = new DeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;:};

final_type ::= FINAL:token1 INT:token2 
	{:RESULT= token1.value()+" "+token2.value();:}
	| FINAL:token1 BOOL:token2
	 {:RESULT= token1.value()+" "+token2.value();:};


final_var_decl ::= id:id COLON final_type:t bracket_list:arr
		{:DeclNode decl = new DeclNode((IdNode)id, t, arr,id.position());
		  RESULT = decl; :};

final_var_init ::= final_var_decl:fvd GETS expr:e
		{:ArrayList<VisualizableTreeNode> list= new ArrayList<VisualizableTreeNode>();
		  ((DeclNode)fvd).setInitialValue(e);
		  list.add(fvd);
		  InstNode inst = new InstNode(list, e, span(fvd.position(), e.position()));
		  RESULT=inst; :}
		| error 		
		{: 
		  RESULT= new ErrorNode(null);
		:};

		 
bracket_list ::= 
	{: RESULT = new ArrayList<VisualizableTreeNode>(); :}
	| bracket_list:arr OPEN_BRACKET dimension:t CLOSE_BRACKET 
	{: 	if (arr == null) arr = new ArrayList<VisualizableTreeNode>();
		arr.add(t);
		RESULT = arr; :}; 

var_item ::= var_decl:s {: RESULT = s; :} | UNDERSCORE:t {: RESULT = new UnderscoreNode(t.position()); :};
var_list ::= var_decl:s 
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; :}
	| UNDERSCORE:t
	{:  ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(new UnderscoreNode(t.position()));
		RESULT = list;
	:}
	| UNDERSCORE:t COMMA var_item:s
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(new UnderscoreNode(t.position()));
		list.add(s);
		RESULT = list; :}
	| var_list:list COMMA var_item:s
	{:	list.add(s);
		RESULT = list; :};

var_inst ::= var_list:list GETS expr:e
	{:	// we assume that var_list cannot be empty
		AbstractSyntaxNode n = (AbstractSyntaxNode)(list.get(0));
		InstNode inst = new InstNode(list, e, span(n.position(), e.position()));
		RESULT = inst;:};

allowed_element_assign ::= id:id 
	{: RESULT = id; :}
	| func_call:e
	{: RESULT = e; :}
	;

id_brackets ::= id:id OPEN_BRACKET expr:i CLOSE_BRACKET:t
	{: RESULT = new ListIndexNode(id, i, span(id.position(), t.position())); :}
	| func_call:id OPEN_BRACKET expr:i CLOSE_BRACKET:t
	{: RESULT = new ListIndexNode(id, i, span(id.position(), t.position())); :}
	| attr:id OPEN_BRACKET expr:i CLOSE_BRACKET:t
	{: RESULT = new ListIndexNode(id, i, span(id.position(), t.position())); :}
	
	| id_brackets:id OPEN_BRACKET expr:i CLOSE_BRACKET:t
	{: ListIndexNode base = (ListIndexNode)id;
	   RESULT = new ListIndexNode(base, i, span(base.position(), t.position())); :};

var_set ::= id:id GETS expr:expr
<<<<<<< HEAD
	{: RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); :}
	| attr:id GETS expr:expr
=======
>>>>>>> finals
	{: RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); :}
	| id_brackets:id GETS expr:expr
	{: RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); :};
	

use_stmt ::= USE:t id:id
	{: RESULT = new UseNode(id, span(t.position(), id.position()));:}
	| USE:t id:id SEMICOLON
	{: RESULT = new UseNode(id, span(t.position(), id.position()));:};

/*function definition arguments*/	
func_list ::= /* nothing */
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		RESULT = list; :}
	| var_decl:s 
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; :}
	| func_list:list COMMA var_decl:s
	{:	list.add(s);
		RESULT = list; :};

<<<<<<< HEAD
types ::= {: RESULT = new ArrayList<XiType>(); :}
=======
types ::= /* nothing */ 
	{: RESULT = new ArrayList<XiPrimitiveType>(); :}
>>>>>>> finals
	| COLON type:type bracket_list:dim
	{: RESULT = new ArrayList<XiType>(); RESULT.add(new XiPrimitiveType(type, dim)); :}
	| types:arr COMMA type:type bracket_list:dim
	{:	RESULT = arr;
		arr.add(new XiPrimitiveType(type, dim)); :}
	; 		

func_decl ::= id:id OPEN_PAREN func_list:list CLOSE_PAREN types:types block:block
	{:	FuncDeclNode func_decl = new FuncDeclNode((IdNode)id, list, types, (BlockNode)block, span(id.position(), block.position()));
		RESULT = func_decl; :};

use_list ::= use_stmt:s
	{:	ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; :}
	| use_list:l use_stmt:s
	{:	ProgramNode program = (ProgramNode)l;
		program.add(s);
		RESULT = program; :};

<<<<<<< HEAD
varclass_decl ::= id:id COLON type:t bracket_list:arr
	{:	// check that arr is empty
		ClassDeclNode decl = new ClassDeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;:};
idclass_list ::= id:id1 COMMA id:id2
	{:
		ArrayList<IdNode> list = new ArrayList<IdNode>();
		list.add((IdNode)id1);
		list.add((IdNode)id2);
		RESULT = list;
	:}
	| idclass_list:list COMMA id:id
	{:
		list.add((IdNode)id);
		RESULT = list;
	:};
varclass_inst ::= varclass_decl:decl GETS expr:e
	{:	// we assume that var_list cannot be empty
		ClassDeclNode cdecl = (ClassDeclNode)decl;
		cdecl.position = span(decl.position(), e.position());
		cdecl.expr = e;
		cdecl.children.add(e);
		RESULT = cdecl;:};
		
varclass_list ::= varclass_decl:s 
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; :}
	| varclass_inst:s
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; :}
	| idclass_list:idlist COLON type:t bracket_list:arr
	{:	
		ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		for (IdNode id : idlist){
			list.add(new ClassDeclNode(id, t, arr, id.position()));
		}
		RESULT = list; :};



class_block ::= varclass_list:list
	{:
		RESULT = list;
	:}
	| func_decl:s
	{:
		ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list;
	:}
	| class_block:list varclass_list:decls
	{:
		list.addAll(decls);
		RESULT = list;
	:}
	| class_block:list func_decl:s
	{:
		list.add(s);
		RESULT = list;
	:};

class_decl ::= CLASS:c id:id OPEN_BRACE:t class_block:b CLOSE_BRACE:e
	{:
		ClassNode class_node = new ClassNode((IdNode)id, span(c.position(), e.position()));
		class_node.children.addAll(b);
		RESULT = class_node;
	:}
	| CLASS:c id:id EXTENDS id:ex OPEN_BRACE:t class_block:b CLOSE_BRACE:e
	{:
		ClassNode class_node = new ClassNode((IdNode)id, span(c.position(), e.position()));
		class_node.children.addAll(b);
		class_node.ex = (IdNode)ex;
		RESULT = class_node;
	:};
	
gblvar_list ::= gblvar_decl:s 
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; :}
	| gblvar_inst:s
	{:	ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; :}
	| gblid_list:idlist COLON type:t bracket_list:arr
	{:	
		ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		for (IdNode id : idlist){
			list.add(new GblDeclNode(id, t, arr, id.position()));
		}
		RESULT = list; :};

gblvar_inst ::= gblvar_decl:decl GETS expr:e
	{:	// we assume that var_list cannot be empty
		GblDeclNode gdecl = (GblDeclNode)decl;
		gdecl.position = span(decl.position(), e.position());
		gdecl.expr = e;
		gdecl.children.add(e);
		RESULT = gdecl;:};

gblvar_decl ::= id:id COLON type:t bracket_list:arr
	{:	// check that arr is empty
		GblDeclNode decl = new GblDeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;:};

gblid_list ::= id:id1 COMMA id:id2
	{:
		ArrayList<IdNode> list = new ArrayList<IdNode>();
		list.add((IdNode)id1);
		list.add((IdNode)id2);
		RESULT = list;
	:}
	| gblid_list:list COMMA id:id
	{:
		list.add((IdNode)id);
		RESULT = list;
	:};

=======
>>>>>>> finals
program ::= use_list:p func_decl:s
	{:	ProgramNode program = (ProgramNode)p;
		program.add(s);
		RESULT = program; :}
	| use_list:p class_decl:s
	{:	ProgramNode program = (ProgramNode)p;
		program.add(s);
		RESULT = program;:}
	| use_list:p gblvar_list:s
	{:	ProgramNode program = (ProgramNode)p;
		program.addAll(s);
		RESULT = program;:}
	| gblvar_list:s
	{:	ProgramNode program = new ProgramNode(((GblDeclNode)s.get(0)).position());
		program.addAll(s);
		RESULT = program; :}		
	| func_decl:s
	{:	ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; :}
<<<<<<< HEAD
	| class_decl:s
	{:	ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; :}
	| program:p gblvar_list:s
	{:	ProgramNode program = (ProgramNode)p;
		program.addAll(s);
		program.position = span(p.position(), ((GblDeclNode)s.get(0)).position());
		RESULT = program; :}
=======
>>>>>>> finals
	| program:p func_decl:s
	{:	ProgramNode program = (ProgramNode)p;
		program.add(s);
		program.position = span(p.position(), s.position());
		RESULT = program; :};
