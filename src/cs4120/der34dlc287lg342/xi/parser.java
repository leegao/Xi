
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
<<<<<<< HEAD
// Thu Dec 15 03:34:03 EST 2011
=======
// Wed Dec 14 23:03:09 EST 2011
>>>>>>> finals
//----------------------------------------------------

package cs4120.der34dlc287lg342.xi;

import edu.cornell.cs.cs4120.util.VisualizableTreeNode;
import edu.cornell.cs.cs4120.xi.AbstractSyntaxNode;
import edu.cornell.cs.cs4120.xi.CompilationException;
import edu.cornell.cs.cs4120.xi.lexer.Token;
import edu.cornell.cs.cs4120.xi.Position;
import cs4120.der34dlc287lg342.xi.ast.*;
<<<<<<< HEAD
import cs4120.der34dlc287lg342.xi.typechecker.XiType;
import cs4120.der34dlc287lg342.xi.typechecker.XiPrimitiveType;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 15 03:34:03 EST 2011
=======
import cs4120.der34dlc287lg342.xi.typechecker.XiPrimitiveType;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import cs4120.der34dlc287lg342.xi.sym;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 14 23:03:09 EST 2011
>>>>>>> finals
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\221\000\002\002\004\000\002\051\003\000\002\051" +
    "\003\000\002\013\003\000\002\016\003\000\002\016\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\005\000\002\052\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\006\000\002" +
    "\004\004\000\002\004\005\000\002\005\003\000\002\005" +
    "\003\000\002\006\006\000\002\006\006\000\002\043\002" +
    "\000\002\043\003\000\002\043\005\000\002\010\006\000" +
    "\002\011\004\000\002\011\006\000\002\011\007\000\002" +
    "\012\003\000\002\012\005\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\030\003\000\002\030\003\000\002\020\003\000\002" +
    "\020\004\000\002\021\007\000\002\021\011\000\002\022" +
    "\007\000\002\023\004\000\002\023\003\000\002\023\004" +
    "\000\002\024\003\000\002\024\005\000\002\025\004\000" +
    "\002\025\005\000\002\025\005\000\002\025\006\000\002" +
    "\027\003\000\002\027\004\000\002\026\003\000\002\026" +
    "\004\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\035\002\000\002\035\003\000\002\031\006\000" +
    "\002\040\002\000\002\040\006\000\002\033\003\000\002" +
    "\033\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\005\000\002\041\005\000\002\032\005\000\002\015\003" +
    "\000\002\015\003\000\002\014\006\000\002\014\006\000" +
    "\002\014\006\000\002\014\006\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\054\004\000\002\054" +
    "\005\000\002\042\002\000\002\042\003\000\002\042\005" +
    "\000\002\037\002\000\002\037\005\000\002\037\006\000" +
    "\002\053\010\000\002\003\003\000\002\003\004\000\002" +
    "\056\006\000\002\047\005\000\002\047\005\000\002\057" +
    "\005\000\002\044\003\000\002\044\003\000\002\044\006" +
    "\000\002\045\003\000\002\045\003\000\002\045\004\000" +
    "\002\045\004\000\002\055\007\000\002\055\011\000\002" +
    "\046\003\000\002\046\003\000\002\046\006\000\002\061" +
    "\005\000\002\060\006\000\002\050\005\000\002\050\005" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\004\000\002\002\004\000\002\002\004" });
=======
    "\000\155\000\002\002\004\000\002\045\003\000\002\045" +
    "\003\000\002\012\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\005" +
    "\003\000\002\005\003\000\002\006\006\000\002\006\006" +
    "\000\002\044\002\000\002\044\003\000\002\044\005\000" +
    "\002\007\006\000\002\010\004\000\002\010\006\000\002" +
    "\010\007\000\002\011\003\000\002\011\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\026\003\000\002" +
    "\026\003\000\002\016\003\000\002\016\004\000\002\017" +
    "\007\000\002\017\011\000\002\020\007\000\002\021\004" +
    "\000\002\021\003\000\002\021\004\000\002\022\003\000" +
    "\002\022\005\000\002\023\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\006\000\002\025\003\000\002\025" +
    "\004\000\002\024\003\000\002\024\004\000\002\036\003" +
    "\000\002\036\003\000\002\035\002\000\002\035\003\000" +
    "\002\027\006\000\002\037\004\000\002\037\004\000\002" +
    "\030\006\000\002\031\005\000\002\031\003\000\002\041" +
    "\002\000\002\041\006\000\002\033\003\000\002\033\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\005\000" +
    "\002\042\005\000\002\032\005\000\002\014\003\000\002" +
    "\014\003\000\002\013\006\000\002\013\006\000\002\034" +
    "\005\000\002\034\005\000\002\047\004\000\002\047\005" +
    "\000\002\043\002\000\002\043\003\000\002\043\005\000" +
    "\002\040\002\000\002\040\005\000\002\040\006\000\002" +
    "\046\010\000\002\003\003\000\002\003\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\004" });
>>>>>>> finals

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\355\000\010\004\015\023\012\056\020\001\002\000" +
    "\010\002\uff74\004\uff74\056\uff74\001\002\000\010\046\034" +
    "\052\354\053\353\001\002\000\010\004\uff8f\023\uff8f\056" +
    "\uff8f\001\002\000\006\052\347\053\346\001\002\000\010" +
    "\002\343\004\015\056\020\001\002\000\010\002\uff75\004" +
    "\uff75\056\uff75\001\002\000\004\004\015\001\002\000\010" +
    "\004\015\023\012\056\020\001\002\000\010\002\uff7f\004" +
    "\uff7f\056\uff7f\001\002\000\134\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe" +
    "\061\ufffe\062\ufffe\063\ufffe\001\002\000\010\002\uff76\004" +
    "\uff76\056\uff76\001\002\000\012\002\uff80\004\uff80\043\332" +
    "\056\uff80\001\002\000\004\004\015\001\002\000\006\050" +
    "\023\057\022\001\002\000\004\004\015\001\002\000\004" +
    "\004\015\001\002\000\006\004\uff88\051\uff88\001\002\000" +
    "\006\004\uff86\051\uff86\001\002\000\010\004\uff89\043\324" +
    "\051\uff89\001\002\000\006\052\320\053\317\001\002\000" +
    "\006\004\015\051\315\001\002\000\006\004\uff85\051\uff85" +
    "\001\002\000\010\046\034\052\035\053\033\001\002\000" +
    "\004\004\015\001\002\000\010\004\015\047\uff96\053\uff96" +
    "\001\002\000\010\004\015\012\041\013\037\001\002\000" +
    "\012\004\uffaa\043\uffaa\044\uffaa\051\uffaa\001\002\000\072" +
    "\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\024\uffaf" +
    "\026\uffaf\032\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf" +
    "\061\uffaf\063\uffaf\001\002\000\072\002\uffae\004\uffae\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\011\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\024\uffae\026\uffae\032\uffae\043" +
    "\uffae\044\uffae\046\uffae\047\uffae\050\uffae\051\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\060\uffae\061\uffae\063\uffae\001" +
    "\002\000\072\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\024\uffb0\026\uffb0\032\uffb0\043\uffb0\044\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\060\uffb0\061\uffb0\063\uffb0\001\002\000\012\004\uff8d" +
    "\043\uff8d\044\043\051\uff8d\001\002\000\036\004\015\005" +
    "\052\006\066\007\064\010\050\011\061\024\057\026\060" +
    "\032\046\045\uffad\046\044\060\065\061\051\063\070\001" +
    "\002\000\036\004\015\005\052\006\066\007\064\010\050" +
    "\011\061\024\057\026\060\032\046\046\044\047\151\060" +
    "\065\061\051\063\070\001\002\000\042\025\100\026\075" +
    "\027\106\030\076\031\105\033\107\034\112\035\103\036" +
    "\110\037\074\040\111\041\077\042\104\044\101\045\uffac" +
    "\062\102\001\002\000\034\004\015\005\052\006\066\007" +
    "\064\010\050\011\061\024\057\026\060\032\046\046\044" +
    "\060\065\061\051\063\070\001\002\000\124\002\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\001\002\000\124\002\000\004\000\005\000\006\000" +
    "\007\000\010\000\011\000\016\000\017\000\020\000\021" +
    "\000\022\000\024\000\025\000\026\000\027\000\030\000" +
    "\031\000\032\000\033\000\034\000\035\000\036\000\037" +
    "\000\040\000\041\000\042\000\044\000\045\000\046\000" +
    "\047\000\050\000\051\000\053\000\054\000\055\000\056" +
    "\000\060\000\061\000\062\000\063\000\001\002\000\124" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\042\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\001\002\000\124\002\uffe3\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\001" +
    "\002\000\124\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\060" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\001\002\000\124\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\044\ufffd\045\ufffd\046\144\047\ufffd\050\ufffd\051\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\001\002\000\124\002\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\001\002\000" +
    "\124\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\044\uffdd\045\uffdd\046\136\047\uffdd\050\uffdd" +
    "\051\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\001\002\000\004\046\133\001\002" +
    "\000\034\004\015\005\052\006\066\007\064\010\050\011" +
    "\061\024\057\026\060\032\046\046\044\060\065\061\051" +
    "\063\070\001\002\000\124\002\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030" +
    "\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\041\uffff\042\uffff\044\uffff\045\uffff\046" +
    "\uffff\047\uffff\050\uffff\051\uffff\053\uffff\054\uffff\055\uffff" +
    "\056\uffff\060\uffff\061\uffff\062\uffff\063\uffff\001\002\000" +
    "\124\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\001\002\000\124\002\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\044\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\060\uffde\061\uffde\062\uffde\063\uffde" +
    "\001\002\000\124\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\001\002\000\004\004" +
    "\015\001\002\000\124\002\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\001\002\000\004" +
    "\045\071\001\002\000\124\002\uffdf\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\001\002\000" +
    "\072\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\024" +
    "\uffa9\026\uffa9\032\uffa9\043\uffa9\044\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\051\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\060" +
    "\uffa9\061\uffa9\063\uffa9\001\002\000\124\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb" +
    "\001\002\000\124\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\044\101\045\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7" +
    "\060\uffe7\061\uffe7\062\102\063\uffe7\001\002\000\034\004" +
    "\015\005\052\006\066\007\064\010\050\011\061\024\057" +
    "\026\060\032\046\046\044\060\065\061\051\063\070\001" +
    "\002\000\034\004\015\005\052\006\066\007\064\010\050" +
    "\011\061\024\057\026\060\032\046\046\044\060\065\061" +
    "\051\063\070\001\002\000\034\004\015\005\052\006\066" +
    "\007\064\010\050\011\061\024\057\026\060\032\046\046" +
    "\044\060\065\061\051\063\070\001\002\000\034\004\015" +
    "\005\052\006\066\007\064\010\050\011\061\024\057\026" +
    "\060\032\046\046\044\060\065\061\051\063\070\001\002" +
    "\000\034\004\015\005\052\006\066\007\064\010\050\011" +
    "\061\024\057\026\060\032\046\046\044\060\065\061\051" +
    "\063\070\001\002\000\034\004\015\005\052\006\066\007" +
    "\064\010\050\011\061\024\057\026\060\032\046\046\044" +
    "\060\065\061\051\063\070\001\002\000\004\004\015\001" +
    "\002\000\034\004\015\005\052\006\066\007\064\010\050" +
    "\011\061\024\057\026\060\032\046\046\044\060\065\061" +
    "\051\063\070\001\002\000\034\004\015\005\052\006\066" +
    "\007\064\010\050\011\061\024\057\026\060\032\046\046" +
    "\044\060\065\061\051\063\070\001\002\000\034\004\015" +
    "\005\052\006\066\007\064\010\050\011\061\024\057\026" +
    "\060\032\046\046\044\060\065\061\051\063\070\001\002" +
    "\000\034\004\015\005\052\006\066\007\064\010\050\011" +
    "\061\024\057\026\060\032\046\046\044\060\065\061\051" +
    "\063\070\001\002\000\034\004\015\005\052\006\066\007" +
    "\064\010\050\011\061\024\057\026\060\032\046\046\044" +
    "\060\065\061\051\063\070\001\002\000\034\004\015\005" +
    "\052\006\066\007\064\010\050\011\061\024\057\026\060" +
    "\032\046\046\044\060\065\061\051\063\070\001\002\000" +
    "\034\004\015\005\052\006\066\007\064\010\050\011\061" +
    "\024\057\026\060\032\046\046\044\060\065\061\051\063" +
    "\070\001\002\000\034\004\015\005\052\006\066\007\064" +
    "\010\050\011\061\024\057\026\060\032\046\046\044\060" +
    "\065\061\051\063\070\001\002\000\124\002\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\100\026\075" +
    "\027\106\030\076\031\105\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\044\101" +
    "\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\060\ufff1\061\ufff1\062\102\063\ufff1" +
    "\001\002\000\124\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\024\ufff4\025\100\026\075\027\106\030\076\031" +
    "\105\032\ufff4\033\107\034\112\035\103\036\110\037\074" +
    "\040\ufff4\041\077\042\104\044\101\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\060\ufff4\061\ufff4\062\102\063\ufff4\001\002\000\124\002" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0\025" +
    "\100\026\075\027\106\030\076\031\105\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\044\101\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\060\ufff0\061\ufff0\062" +
    "\102\063\ufff0\001\002\000\124\002\uffef\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\024\uffef\025\100\026\075\027\106" +
    "\030\076\031\105\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\042\uffef\044\101\045\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\060\uffef\061\uffef\062\102\063\uffef\001\002" +
    "\000\124\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\044\101\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\060\uffeb" +
    "\061\uffeb\062\102\063\uffeb\001\002\000\124\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\044" +
    "\101\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\060\uffe9\061\uffe9\062\102\063" +
    "\uffe9\001\002\000\124\002\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\024\ufff2\025\100\026\075\027\106\030\076" +
    "\031\105\032\ufff2\033\107\034\112\035\103\036\110\037" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\044\101\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\053\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\060\ufff2\061\ufff2\062\102\063\ufff2\001\002\000\124" +
    "\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\024\uffee" +
    "\025\100\026\075\027\106\030\076\031\105\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\044\101\045\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\060\uffee\061\uffee" +
    "\062\102\063\uffee\001\002\000\126\002\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\060\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\001\002\000\042\025\100\026\075\027\106\030\076" +
    "\031\105\033\107\034\112\035\103\036\110\037\074\040" +
    "\111\041\077\042\104\044\101\045\125\062\102\001\002" +
    "\000\124\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\001\002\000\124\002\uffed\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\106\030\076\031\105\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\044" +
    "\101\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\060\uffed\061\uffed\062\102\063" +
    "\uffed\001\002\000\124\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\024\ufff3\025\100\026\075\027\106\030\076" +
    "\031\105\032\ufff3\033\107\034\112\035\103\036\110\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\044\101\045\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\053\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\060\ufff3\061\ufff3\062\102\063\ufff3\001\002\000\124" +
    "\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\044\101\045\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\060\uffea\061\uffea" +
    "\062\102\063\uffea\001\002\000\124\002\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\106\030\076\031\105\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\044\101\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\053\uffec\054\uffec" +
    "\055\uffec\056\uffec\060\uffec\061\uffec\062\102\063\uffec\001" +
    "\002\000\124\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\024\ufff5\025\100\026\075\027\106\030\076\031\105" +
    "\032\ufff5\033\107\034\112\035\103\036\110\037\ufff5\040" +
    "\ufff5\041\077\042\104\044\101\045\ufff5\046\ufff5\047\ufff5" +
    "\050\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\060" +
    "\ufff5\061\ufff5\062\102\063\ufff5\001\002\000\034\004\015" +
    "\005\052\006\066\007\064\010\050\011\061\024\057\026" +
    "\060\032\046\046\044\060\065\061\051\063\070\001\002" +
    "\000\042\025\100\026\075\027\106\030\076\031\105\033" +
    "\107\034\112\035\103\036\110\037\074\040\111\041\077" +
    "\042\104\044\101\047\135\062\102\001\002\000\124\002" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\001\002\000\040\004\015\005\052\006\066" +
    "\007\064\010\050\011\061\024\057\026\060\032\046\046" +
    "\044\047\uffd5\053\uffd5\060\065\061\051\063\070\001\002" +
    "\000\044\025\100\026\075\027\106\030\076\031\105\033" +
    "\107\034\112\035\103\036\110\037\074\040\111\041\077" +
    "\042\104\044\101\047\uffd4\053\uffd4\062\102\001\002\000" +
    "\006\047\142\053\141\001\002\000\034\004\015\005\052" +
    "\006\066\007\064\010\050\011\061\024\057\026\060\032" +
    "\046\046\044\060\065\061\051\063\070\001\002\000\124" +
    "\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\060\uffdc\061\uffdc" +
    "\062\uffdc\063\uffdc\001\002\000\044\025\100\026\075\027" +
    "\106\030\076\031\105\033\107\034\112\035\103\036\110" +
    "\037\074\040\111\041\077\042\104\044\101\047\uffd3\053" +
    "\uffd3\062\102\001\002\000\040\004\015\005\052\006\066" +
    "\007\064\010\050\011\061\024\057\026\060\032\046\046" +
    "\044\047\uffd5\053\uffd5\060\065\061\051\063\070\001\002" +
    "\000\006\047\146\053\141\001\002\000\124\002\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\060\uffd7\061\uffd7\062\uffd7\063" +
    "\uffd7\001\002\000\124\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\044\101\045\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\060\uffe8\061\uffe8\062\102\063\uffe8\001\002\000\044" +
    "\025\100\026\075\027\106\030\076\031\105\033\107\034" +
    "\112\035\103\036\110\037\074\040\111\041\077\042\104" +
    "\044\101\047\153\053\152\062\102\001\002\000\124\002" +
    "\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\001\002\000\036\004\015\005\052\006\066" +
    "\007\064\010\050\011\061\024\057\026\060\032\046\046" +
    "\044\047\155\060\065\061\051\063\070\001\002\000\124" +
    "\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051" +
    "\uffda\053\uffda\054\uffda\055\uffda\056\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\001\002\000\044\025\100\026\075\027" +
    "\106\030\076\031\105\033\107\034\112\035\103\036\110" +
    "\037\074\040\111\041\077\042\104\044\101\047\uffce\053" +
    "\uffce\062\102\001\002\000\124\002\uffd0\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\001\002" +
    "\000\006\047\160\053\157\001\002\000\034\004\015\005" +
    "\052\006\066\007\064\010\050\011\061\024\057\026\060" +
    "\032\046\046\044\060\065\061\051\063\070\001\002\000" +
    "\124\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\001\002\000\044\025\100\026\075" +
    "\027\106\030\076\031\105\033\107\034\112\035\103\036" +
    "\110\037\074\040\111\041\077\042\104\044\101\047\uffcd" +
    "\053\uffcd\062\102\001\002\000\006\047\171\053\170\001" +
    "\002\000\006\047\uff95\053\uff95\001\002\000\004\052\165" +
    "\001\002\000\010\004\015\012\041\013\037\001\002\000" +
    "\066\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\024\uffaa\026" +
    "\uffaa\032\uffaa\043\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\053\uffaa\054\uffaa\055\uffaa\060\uffaa\061\uffaa\063" +
    "\uffaa\001\002\000\066\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\024\uffab\026\uffab\032\uffab\043\uffab\044\043\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\053\uffab\054\uffab\055\uffab\060" +
    "\uffab\061\uffab\063\uffab\001\002\000\004\004\015\001\002" +
    "\000\010\050\uff93\052\173\053\uff93\001\002\000\006\050" +
    "\200\053\176\001\002\000\010\004\015\012\041\013\037" +
    "\001\002\000\010\044\uffaa\050\uffaa\053\uffaa\001\002\000" +
    "\010\044\043\050\uff92\053\uff92\001\002\000\010\004\015" +
    "\012\041\013\037\001\002\000\012\002\uff90\004\uff90\051" +
    "\uff90\056\uff90\001\002\000\052\004\015\005\052\006\066" +
    "\007\064\010\050\011\061\016\206\020\217\021\211\022" +
    "\210\024\057\026\060\032\046\046\044\050\200\051\222" +
    "\055\221\060\065\061\051\063\070\001\002\000\006\043" +
    "\304\044\303\001\002\000\062\004\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\024\uffc7\026\uffc7\032\uffc7\043\uffa6\046\uffc7" +
    "\050\uffc7\051\uffc7\053\uffa6\054\uffc7\055\uffc7\060\uffc7\061" +
    "\uffc7\063\uffc7\001\002\000\056\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\024\uffc8\026\uffc8\032\uffc8\046\uffc8\050\uffc8" +
    "\051\uffc8\054\uffc8\055\uffc8\060\uffc8\061\uffc8\063\uffc8\001" +
    "\002\000\044\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\277\044\276\046\136\062\uffdd\001\002" +
    "\000\006\051\275\054\257\001\002\000\004\046\265\001" +
    "\002\000\052\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\016\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2\026" +
    "\uffb2\032\uffb2\046\uffb2\050\uffb2\051\uffb2\055\uffb2\060\uffb2" +
    "\061\uffb2\063\uffb2\001\002\000\040\004\015\005\052\006" +
    "\066\007\064\010\050\011\061\024\057\026\060\032\046" +
    "\046\044\051\uffbc\054\uffbc\060\065\061\051\063\070\001" +
    "\002\000\056\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\024" +
    "\uffca\026\uffca\032\uffca\046\uffca\050\uffca\051\uffca\054\uffca" +
    "\055\uffca\060\uffca\061\uffca\063\uffca\001\002\000\056\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb\026\uffcb\032" +
    "\uffcb\046\uffcb\050\uffcb\051\uffcb\054\uffcb\055\uffcb\060\uffcb" +
    "\061\uffcb\063\uffcb\001\002\000\052\004\015\005\052\006" +
    "\066\007\064\010\050\011\061\016\206\020\217\021\211" +
    "\022\210\024\057\026\060\032\046\046\044\050\200\051" +
    "\256\055\221\060\065\061\051\063\070\001\002\000\056" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\026\uffc5" +
    "\032\uffc5\046\uffc5\050\uffc5\051\uffc5\054\uffc5\055\uffc5\060" +
    "\uffc5\061\uffc5\063\uffc5\001\002\000\046\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\247\044\250" +
    "\046\144\052\165\062\ufffd\001\002\000\006\043\244\053" +
    "\243\001\002\000\004\046\237\001\002\000\040\025\100" +
    "\026\075\027\106\030\076\031\105\033\107\034\112\035" +
    "\103\036\110\037\074\040\111\041\077\042\104\044\101" +
    "\062\102\001\002\000\006\043\uffa5\053\uffa5\001\002\000" +
    "\062\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\024" +
    "\uffb8\026\uffb8\032\uffb8\046\uffb8\050\uffb8\051\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\060\uffb8\061\uffb8\063\uffb8\001\002\000" +
    "\056\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc\026" +
    "\uffcc\032\uffcc\046\uffcc\050\uffcc\051\uffcc\054\uffcc\055\uffcc" +
    "\060\uffcc\061\uffcc\063\uffcc\001\002\000\056\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\024\uffc6\026\uffc6\032\uffc6\046" +
    "\uffc6\050\uffc6\051\uffc6\054\uffc6\055\uffc6\060\uffc6\061\uffc6" +
    "\063\uffc6\001\002\000\054\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\016\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\024\uffb4\026\uffb4\032\uffb4\046\uffb4\050\uffb4\051\uffb4\054" +
    "\232\055\uffb4\060\uffb4\061\uffb4\063\uffb4\001\002\000\112" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffc9\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\044\227\046\uffc9\050\uffc9\051\uffc9\054\uffc9\055\uffc9\060" +
    "\uffc9\061\uffc9\062\uffe6\063\uffc9\001\002\000\034\004\015" +
    "\005\052\006\066\007\064\010\050\011\061\024\057\026" +
    "\060\032\046\046\044\060\065\061\051\063\070\001\002" +
    "\000\042\025\100\026\075\027\106\030\076\031\105\033" +
    "\107\034\112\035\103\036\110\037\074\040\111\041\077" +
    "\042\104\044\101\045\231\062\102\001\002\000\006\043" +
    "\uff9e\044\uff9e\001\002\000\052\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\016\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\024\uffb3\026\uffb3\032\uffb3\046\uffb3\050\uffb3\051\uffb3" +
    "\055\uffb3\060\uffb3\061\uffb3\063\uffb3\001\002\000\006\004" +
    "\015\055\235\001\002\000\006\043\uffa4\053\uffa4\001\002" +
    "\000\006\043\uffa7\053\uffa7\001\002\000\006\043\uffa8\053" +
    "\uffa8\001\002\000\034\004\015\005\052\006\066\007\064" +
    "\010\050\011\061\024\057\026\060\032\046\046\044\060" +
    "\065\061\051\063\070\001\002\000\042\025\100\026\075" +
    "\027\106\030\076\031\105\033\107\034\112\035\103\036" +
    "\110\037\074\040\111\041\077\042\104\044\101\047\241" +
    "\062\102\001\002\000\046\004\015\005\052\006\066\007" +
    "\064\010\050\011\061\016\206\020\217\021\211\024\057" +
    "\026\060\032\046\046\044\050\200\055\221\060\065\061" +
    "\051\063\070\001\002\000\056\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\024\uffbe\026\uffbe\032\uffbe\046\uffbe\050\uffbe" +
    "\051\uffbe\054\uffbe\055\uffbe\060\uffbe\061\uffbe\063\uffbe\001" +
    "\002\000\006\004\015\055\235\001\002\000\034\004\015" +
    "\005\052\006\066\007\064\010\050\011\061\024\057\026" +
    "\060\032\046\046\044\060\065\061\051\063\070\001\002" +
    "\000\112\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\024\uffa2" +
    "\025\100\026\075\027\106\030\076\031\105\032\uffa2\033" +
    "\107\034\112\035\103\036\110\037\074\040\111\041\077" +
    "\042\104\044\101\046\uffa2\050\uffa2\051\uffa2\054\uffa2\055" +
    "\uffa2\060\uffa2\061\uffa2\062\102\063\uffa2\001\002\000\006" +
    "\043\uffa3\053\uffa3\001\002\000\034\004\015\005\052\006" +
    "\066\007\064\010\050\011\061\024\057\026\060\032\046" +
    "\046\044\060\065\061\051\063\070\001\002\000\034\004" +
    "\015\005\052\006\066\007\064\010\050\011\061\024\057" +
    "\026\060\032\046\046\044\060\065\061\051\063\070\001" +
    "\002\000\042\025\100\026\075\027\106\030\076\031\105" +
    "\033\107\034\112\035\103\036\110\037\074\040\111\041" +
    "\077\042\104\044\101\045\252\062\102\001\002\000\006" +
    "\043\uff9f\044\uff9f\001\002\000\112\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\024\uff9b\025\100\026\075\027\106\030" +
    "\076\031\105\032\uff9b\033\107\034\112\035\103\036\110" +
    "\037\074\040\111\041\077\042\104\044\101\046\uff9b\050" +
    "\uff9b\051\uff9b\054\uff9b\055\uff9b\060\uff9b\061\uff9b\062\102" +
    "\063\uff9b\001\002\000\006\051\260\054\257\001\002\000" +
    "\052\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1" +
    "\016\uffb1\020\uffb1\021\uffb1\022\uffb1\024\uffb1\026\uffb1\032" +
    "\uffb1\046\uffb1\050\uffb1\051\uffb1\055\uffb1\060\uffb1\061\uffb1" +
    "\063\uffb1\001\002\000\062\002\uffb6\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\024\uffb6\026\uffb6\032\uffb6\046\uffb6\050" +
    "\uffb6\051\uffb6\054\uffb6\055\uffb6\056\uffb6\060\uffb6\061\uffb6" +
    "\063\uffb6\001\002\000\006\051\uffbb\054\uffbb\001\002\000" +
    "\062\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\024" +
    "\uffb5\026\uffb5\032\uffb5\046\uffb5\050\uffb5\051\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\060\uffb5\061\uffb5\063\uffb5\001\002\000" +
    "\046\025\100\026\075\027\106\030\076\031\105\033\107" +
    "\034\112\035\103\036\110\037\074\040\111\041\077\042" +
    "\104\044\101\051\uffba\053\uffba\054\uffba\062\102\001\002" +
    "\000\010\051\uffbd\053\263\054\uffbd\001\002\000\034\004" +
    "\015\005\052\006\066\007\064\010\050\011\061\024\057" +
    "\026\060\032\046\046\044\060\065\061\051\063\070\001" +
    "\002\000\046\025\100\026\075\027\106\030\076\031\105" +
    "\033\107\034\112\035\103\036\110\037\074\040\111\041" +
    "\077\042\104\044\101\051\uffb9\053\uffb9\054\uffb9\062\102" +
    "\001\002\000\034\004\015\005\052\006\066\007\064\010" +
    "\050\011\061\024\057\026\060\032\046\046\044\060\065" +
    "\061\051\063\070\001\002\000\042\025\100\026\075\027" +
    "\106\030\076\031\105\033\107\034\112\035\103\036\110" +
    "\037\074\040\111\041\077\042\104\044\101\047\267\062" +
    "\102\001\002\000\046\004\015\005\052\006\066\007\064" +
    "\010\050\011\061\016\206\020\217\021\211\024\057\026" +
    "\060\032\046\046\044\050\200\055\221\060\065\061\051" +
    "\063\070\001\002\000\056\004\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\016\uffc0\017\273\020\uffc0\021\uffc0" +
    "\022\uffc0\024\uffc0\026\uffc0\032\uffc0\046\uffc0\050\uffc0\051" +
    "\uffc0\054\uffc0\055\uffc0\060\uffc0\061\uffc0\063\uffc0\001\002" +
    "\000\056\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2" +
    "\026\uffc2\032\uffc2\046\uffc2\050\uffc2\051\uffc2\054\272\055" +
    "\uffc2\060\uffc2\061\uffc2\063\uffc2\001\002\000\056\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\026\uffc1\032\uffc1" +
    "\046\uffc1\050\uffc1\051\uffc1\054\uffc1\055\uffc1\060\uffc1\061" +
    "\uffc1\063\uffc1\001\002\000\046\004\015\005\052\006\066" +
    "\007\064\010\050\011\061\016\206\020\217\021\211\024" +
    "\057\026\060\032\046\046\044\050\200\055\221\060\065" +
    "\061\051\063\070\001\002\000\056\004\uffbf\005\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\024\uffbf\026\uffbf\032\uffbf\046\uffbf\050" +
    "\uffbf\051\uffbf\054\uffbf\055\uffbf\060\uffbf\061\uffbf\063\uffbf" +
    "\001\002\000\062\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\024\uffb7\026\uffb7\032\uffb7\046\uffb7\050\uffb7\051" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\060\uffb7\061\uffb7\063\uffb7" +
    "\001\002\000\034\004\015\005\052\006\066\007\064\010" +
    "\050\011\061\024\057\026\060\032\046\046\044\060\065" +
    "\061\051\063\070\001\002\000\034\004\015\005\052\006" +
    "\066\007\064\010\050\011\061\024\057\026\060\032\046" +
    "\046\044\060\065\061\051\063\070\001\002\000\112\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\024\uff9a\025\100\026" +
    "\075\027\106\030\076\031\105\032\uff9a\033\107\034\112" +
    "\035\103\036\110\037\074\040\111\041\077\042\104\044" +
    "\101\046\uff9a\050\uff9a\051\uff9a\054\uff9a\055\uff9a\060\uff9a" +
    "\061\uff9a\062\102\063\uff9a\001\002\000\042\025\100\026" +
    "\075\027\106\030\076\031\105\033\107\034\112\035\103" +
    "\036\110\037\074\040\111\041\077\042\104\044\101\045" +
    "\302\062\102\001\002\000\006\043\uff9d\044\uff9d\001\002" +
    "\000\034\004\015\005\052\006\066\007\064\010\050\011" +
    "\061\024\057\026\060\032\046\046\044\060\065\061\051" +
    "\063\070\001\002\000\034\004\015\005\052\006\066\007" +
    "\064\010\050\011\061\024\057\026\060\032\046\046\044" +
    "\060\065\061\051\063\070\001\002\000\112\004\uff99\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\011\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\024\uff99\025\100\026\075\027" +
    "\106\030\076\031\105\032\uff99\033\107\034\112\035\103" +
    "\036\110\037\074\040\111\041\077\042\104\044\101\046" +
    "\uff99\050\uff99\051\uff99\054\uff99\055\uff99\060\uff99\061\uff99" +
    "\062\102\063\uff99\001\002\000\042\025\100\026\075\027" +
    "\106\030\076\031\105\033\107\034\112\035\103\036\110" +
    "\037\074\040\111\041\077\042\104\044\101\045\307\062" +
    "\102\001\002\000\006\043\uff9c\044\uff9c\001\002\000\010" +
    "\044\uffaa\050\uffaa\053\uffaa\001\002\000\010\044\043\050" +
    "\uff91\053\uff91\001\002\000\006\047\uff94\053\uff94\001\002" +
    "\000\006\052\uff8c\053\uff8c\001\002\000\006\004\uff84\051" +
    "\uff84\001\002\000\010\002\uff82\004\uff82\056\uff82\001\002" +
    "\000\006\004\uff83\051\uff83\001\002\000\004\004\015\001" +
    "\002\000\010\004\015\012\041\013\037\001\002\000\010" +
    "\004\uffaa\044\uffaa\051\uffaa\001\002\000\010\004\uff87\044" +
    "\043\051\uff87\001\002\000\006\052\uff8b\053\uff8b\001\002" +
    "\000\034\004\015\005\052\006\066\007\064\010\050\011" +
    "\061\024\057\026\060\032\046\046\044\060\065\061\051" +
    "\063\070\001\002\000\044\004\uff8a\025\100\026\075\027" +
    "\106\030\076\031\105\033\107\034\112\035\103\036\110" +
    "\037\074\040\111\041\077\042\104\044\101\051\uff8a\062" +
    "\102\001\002\000\004\050\327\001\002\000\004\004\015" +
    "\001\002\000\006\004\015\051\331\001\002\000\010\002" +
    "\uff81\004\uff81\056\uff81\001\002\000\034\004\015\005\052" +
    "\006\066\007\064\010\050\011\061\024\057\026\060\032" +
    "\046\046\044\060\065\061\051\063\070\001\002\000\046" +
    "\002\uff7d\004\uff7d\025\100\026\075\027\106\030\076\031" +
    "\105\033\107\034\112\035\103\036\110\037\074\040\111" +
    "\041\077\042\104\044\101\056\uff7d\062\102\001\002\000" +
    "\010\002\uff78\004\uff78\056\uff78\001\002\000\010\004\uff8e" +
    "\023\uff8e\056\uff8e\001\002\000\010\002\uff79\004\uff79\056" +
    "\uff79\001\002\000\010\002\uff77\004\uff77\056\uff77\001\002" +
    "\000\012\004\uff98\023\uff98\054\341\056\uff98\001\002\000" +
    "\010\004\uff97\023\uff97\056\uff97\001\002\000\010\002\uff71" +
    "\004\uff71\056\uff71\001\002\000\004\002\001\001\002\000" +
    "\010\002\uff72\004\uff72\056\uff72\001\002\000\010\002\uff73" +
    "\004\uff73\056\uff73\001\002\000\004\004\015\001\002\000" +
    "\010\004\015\012\041\013\037\001\002\000\012\002\uffaa" +
    "\004\uffaa\044\uffaa\056\uffaa\001\002\000\012\002\uff7e\004" +
    "\uff7e\044\043\056\uff7e\001\002\000\006\052\uff7a\053\uff7a" +
    "\001\002\000\004\004\015\001\002\000\010\004\015\012" +
    "\041\013\037\001\002\000\014\002\uffaa\004\uffaa\043\uffaa" +
    "\044\uffaa\056\uffaa\001\002\000\014\002\uff7c\004\uff7c\043" +
    "\uff7c\044\043\056\uff7c\001\002\000\006\052\uff7b\053\uff7b" +
    "\001\002" });
=======
    "\000\260\000\006\004\005\024\006\001\002\000\006\002" +
    "\261\004\005\001\002\000\104\003\ufffe\004\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\004\004" +
    "\005\001\002\000\006\004\uff99\024\uff99\001\002\000\006" +
    "\002\uff96\004\uff96\001\002\000\004\047\015\001\002\000" +
    "\006\004\005\024\006\001\002\000\006\004\uff98\024\uff98" +
    "\001\002\000\006\002\uff97\004\uff97\001\002\000\010\004" +
    "\005\050\uffa0\054\uffa0\001\002\000\006\050\133\054\132" +
    "\001\002\000\006\050\uff9f\054\uff9f\001\002\000\004\053" +
    "\021\001\002\000\006\012\024\013\023\001\002\000\042" +
    "\003\uffb1\004\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\025\uffb1\044\uffb1\045\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\001\002\000\042\003\uffba\004" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\025\uffba" +
    "\044\uffba\045\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055" +
    "\uffba\056\uffba\001\002\000\042\003\uffbb\004\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\025\uffbb\044\uffbb\045" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\001\002\000\042\003\uffb7\004\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\025\uffb7\044\uffb7\045\026\050\uffb7" +
    "\051\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002\000" +
    "\030\004\005\005\035\006\036\007\046\010\033\011\040" +
    "\025\031\027\027\033\044\046\uffb9\047\037\001\002\000" +
    "\026\004\005\005\035\006\036\007\046\010\033\011\040" +
    "\025\031\027\027\033\044\047\037\001\002\000\074\003" +
    "\uffe9\004\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\001\002\000\004\047\126\001\002" +
    "\000\076\003\uffe7\004\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7\047\120\050\uffe7" +
    "\051\uffe7\052\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002\000" +
    "\074\003\000\004\000\017\000\020\000\021\000\022\000" +
    "\023\000\025\000\026\000\027\000\030\000\031\000\032" +
    "\000\034\000\035\000\036\000\037\000\040\000\041\000" +
    "\042\000\043\000\045\000\046\000\050\000\051\000\052" +
    "\000\054\000\055\000\056\000\001\002\000\004\046\117" +
    "\001\002\000\074\003\uffeb\004\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\045\uffeb\046\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000" +
    "\074\003\uffec\004\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\045\uffec\046\uffec\050\uffec\051\uffec\052" +
    "\uffec\054\uffec\055\uffec\056\uffec\001\002\000\030\004\005" +
    "\005\035\006\036\007\046\010\033\011\040\025\031\027" +
    "\027\033\044\047\037\050\106\001\002\000\074\003\uffff" +
    "\004\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043" +
    "\uffff\045\uffff\046\uffff\050\uffff\051\uffff\052\uffff\054\uffff" +
    "\055\uffff\056\uffff\001\002\000\074\003\uffe8\004\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\045\uffe8" +
    "\046\uffe8\050\uffe8\051\uffe8\052\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\001\002\000\074\003\uffee\004\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\045\uffee\046\uffee\050" +
    "\uffee\051\uffee\052\uffee\054\uffee\055\uffee\056\uffee\001\002" +
    "\000\074\003\uffea\004\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\045\uffea\046\uffea\050\uffea\051\uffea" +
    "\052\uffea\054\uffea\055\uffea\056\uffea\001\002\000\026\004" +
    "\005\005\035\006\036\007\046\010\033\011\040\025\031" +
    "\027\027\033\044\047\037\001\002\000\040\026\053\027" +
    "\050\030\060\031\051\032\056\034\062\035\064\036\055" +
    "\037\061\040\047\041\063\042\052\043\057\045\054\046" +
    "\uffb8\001\002\000\074\003\uffed\004\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\045\uffed\046\uffed\050" +
    "\uffed\051\uffed\052\uffed\054\uffed\055\uffed\056\uffed\001\002" +
    "\000\026\004\005\005\035\006\036\007\046\010\033\011" +
    "\040\025\031\027\027\033\044\047\037\001\002\000\026" +
    "\004\005\005\035\006\036\007\046\010\033\011\040\025" +
    "\031\027\027\033\044\047\037\001\002\000\026\004\005" +
    "\005\035\006\036\007\046\010\033\011\040\025\031\027" +
    "\027\033\044\047\037\001\002\000\026\004\005\005\035" +
    "\006\036\007\046\010\033\011\040\025\031\027\027\033" +
    "\044\047\037\001\002\000\026\004\005\005\035\006\036" +
    "\007\046\010\033\011\040\025\031\027\027\033\044\047" +
    "\037\001\002\000\026\004\005\005\035\006\036\007\046" +
    "\010\033\011\040\025\031\027\027\033\044\047\037\001" +
    "\002\000\026\004\005\005\035\006\036\007\046\010\033" +
    "\011\040\025\031\027\027\033\044\047\037\001\002\000" +
    "\026\004\005\005\035\006\036\007\046\010\033\011\040" +
    "\025\031\027\027\033\044\047\037\001\002\000\026\004" +
    "\005\005\035\006\036\007\046\010\033\011\040\025\031" +
    "\027\027\033\044\047\037\001\002\000\026\004\005\005" +
    "\035\006\036\007\046\010\033\011\040\025\031\027\027" +
    "\033\044\047\037\001\002\000\026\004\005\005\035\006" +
    "\036\007\046\010\033\011\040\025\031\027\027\033\044" +
    "\047\037\001\002\000\026\004\005\005\035\006\036\007" +
    "\046\010\033\011\040\025\031\027\027\033\044\047\037" +
    "\001\002\000\026\004\005\005\035\006\036\007\046\010" +
    "\033\011\040\025\031\027\027\033\044\047\037\001\002" +
    "\000\026\004\005\005\035\006\036\007\046\010\033\011" +
    "\040\025\031\027\027\033\044\047\037\001\002\000\074" +
    "\003\ufff9\004\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\025\ufff9\026\053\027\050\030\060\031\051\032\056" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\045\054\046\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\001\002\000\074\003\ufffc\004" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc" +
    "\026\053\027\050\030\060\031\051\032\056\034\062\035" +
    "\064\036\055\037\061\040\047\041\ufffc\042\052\043\057" +
    "\045\054\046\ufffc\050\ufffc\051\ufffc\052\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\001\002\000\074\003\ufff7\004\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7\026\053\027" +
    "\050\030\060\031\051\032\056\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\045\054\046" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\001\002\000\074\003\ufff8\004\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\025\ufff8\026\053\027\050\030\060" +
    "\031\051\032\056\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\045\054\046\ufff8\050\ufff8" +
    "\051\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000" +
    "\074\003\ufff3\004\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\045\054\046\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\074\003\ufffa" +
    "\004\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\025" +
    "\ufffa\026\053\027\050\030\060\031\051\032\056\034\062" +
    "\035\064\036\055\037\061\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\045\054\046\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\001\002\000\074\003\ufff1\004\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\045\054" +
    "\046\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\001\002\000\074\003\ufff6\004\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\025\ufff6\026\053\027\050\030" +
    "\060\031\051\032\056\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\043\ufff6\045\054\046\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002" +
    "\000\040\026\053\027\050\030\060\031\051\032\056\034" +
    "\062\035\064\036\055\037\061\040\047\041\063\042\052" +
    "\043\057\045\054\046\076\001\002\000\074\003\uffde\004" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\045\uffde\046\uffde\050\uffde\051\uffde\052\uffde\054\uffde\055" +
    "\uffde\056\uffde\001\002\000\074\003\ufff5\004\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\060\031\051\032\056\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\045\054\046" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\001\002\000\074\003\ufffb\004\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\025\ufffb\026\053\027\050\030\060" +
    "\031\051\032\056\034\062\035\064\036\055\037\061\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\045\054\046\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000" +
    "\074\003\ufff2\004\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\045\054\046\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\001\002\000\074\003\ufff4" +
    "\004\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\060\031\051\032\056\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\045\054\046\ufff4\050\ufff4\051\ufff4\052\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\001\002\000\074\003\ufffd\004\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd\026\053" +
    "\027\050\030\060\031\051\032\056\034\062\035\064\036" +
    "\055\037\061\040\ufffd\041\ufffd\042\052\043\057\045\054" +
    "\046\ufffd\050\ufffd\051\ufffd\052\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\001\002\000\074\003\ufff0\004\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\045\054\046\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002" +
    "\000\042\026\053\027\050\030\060\031\051\032\056\034" +
    "\062\035\064\036\055\037\061\040\047\041\063\042\052" +
    "\043\057\045\054\050\110\054\107\001\002\000\074\003" +
    "\uffdd\004\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\001\002\000\030\004\005\005\035" +
    "\006\036\007\046\010\033\011\040\025\031\027\027\033" +
    "\044\047\037\050\112\001\002\000\074\003\uffe6\004\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\045" +
    "\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\001\002\000\042\026\053\027\050\030\060\031" +
    "\051\032\056\034\062\035\064\036\055\037\061\040\047" +
    "\041\063\042\052\043\057\045\054\050\uffda\054\uffda\001" +
    "\002\000\074\003\uffdc\004\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000\006" +
    "\050\115\054\114\001\002\000\026\004\005\005\035\006" +
    "\036\007\046\010\033\011\040\025\031\027\027\033\044" +
    "\047\037\001\002\000\074\003\uffdb\004\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb\001" +
    "\002\000\042\026\053\027\050\030\060\031\051\032\056" +
    "\034\062\035\064\036\055\037\061\040\047\041\063\042" +
    "\052\043\057\045\054\050\uffd9\054\uffd9\001\002\000\042" +
    "\003\uffb0\004\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\025\uffb0\044\uffb0\045\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\001\002\000\032\004\005\005" +
    "\035\006\036\007\046\010\033\011\040\025\031\027\027" +
    "\033\044\047\037\050\uffe1\054\uffe1\001\002\000\006\050" +
    "\124\054\123\001\002\000\042\026\053\027\050\030\060" +
    "\031\051\032\056\034\062\035\064\036\055\037\061\040" +
    "\047\041\063\042\052\043\057\045\054\050\uffe0\054\uffe0" +
    "\001\002\000\026\004\005\005\035\006\036\007\046\010" +
    "\033\011\040\025\031\027\027\033\044\047\037\001\002" +
    "\000\074\003\uffe3\004\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\045\uffe3\046\uffe3\050\uffe3\051\uffe3" +
    "\052\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000\042\026" +
    "\053\027\050\030\060\031\051\032\056\034\062\035\064" +
    "\036\055\037\061\040\047\041\063\042\052\043\057\045" +
    "\054\050\uffdf\054\uffdf\001\002\000\026\004\005\005\035" +
    "\006\036\007\046\010\033\011\040\025\031\027\027\033" +
    "\044\047\037\001\002\000\040\026\053\027\050\030\060" +
    "\031\051\032\056\034\062\035\064\036\055\037\061\040" +
    "\047\041\063\042\052\043\057\045\054\050\130\001\002" +
    "\000\074\003\uffe2\004\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002\000\074\003" +
    "\uffef\004\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\045\054\046\uffef\050\uffef\051\uffef\052\uffef\054" +
    "\uffef\055\uffef\056\uffef\001\002\000\004\004\005\001\002" +
    "\000\010\051\uff9d\053\135\054\uff9d\001\002\000\006\051" +
    "\142\054\140\001\002\000\006\012\024\013\023\001\002" +
    "\000\010\045\uffb1\051\uffb1\054\uffb1\001\002\000\010\045" +
    "\026\051\uff9c\054\uff9c\001\002\000\006\012\024\013\023" +
    "\001\002\000\006\002\uff9a\004\uff9a\001\002\000\026\003" +
    "\166\004\005\017\151\021\147\022\163\023\150\025\031" +
    "\051\142\052\164\056\143\001\002\000\006\044\uffac\054" +
    "\uffac\001\002\000\032\003\uffd7\004\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\025\uffd7\051\uffd7\052\uffd7\055" +
    "\uffd7\056\uffd7\001\002\000\006\044\245\045\246\001\002" +
    "\000\006\044\240\054\237\001\002\000\004\047\233\001" +
    "\002\000\032\004\005\005\035\006\036\007\046\010\033" +
    "\011\040\025\031\027\027\033\044\047\037\052\uffc7\055" +
    "\uffc7\001\002\000\004\047\217\001\002\000\032\003\uffd3" +
    "\004\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\025" +
    "\uffd3\051\uffd3\052\uffd3\055\uffd3\056\uffd3\001\002\000\032" +
    "\003\uffd4\004\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\025\uffd4\051\uffd4\052\uffd4\055\uffd4\056\uffd4\001\002" +
    "\000\004\045\214\001\002\000\032\003\uffd1\004\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1\051\uffd1" +
    "\052\uffd1\055\uffd1\056\uffd1\001\002\000\036\003\uffd2\004" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2" +
    "\044\uffad\051\uffd2\052\uffd2\054\uffad\055\uffd2\056\uffd2\001" +
    "\002\000\026\003\166\004\005\017\151\021\147\022\163" +
    "\023\150\025\031\051\142\052\211\056\143\001\002\000" +
    "\034\003\uffd5\004\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\025\uffd5\045\uffa7\051\uffd5\052\uffd5\055\uffd5\056" +
    "\uffd5\001\002\000\006\052\206\055\207\001\002\000\012" +
    "\044\176\045\uffa8\047\120\053\177\001\002\000\032\003" +
    "\uffd6\004\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\025\uffd6\051\uffd6\052\uffd6\055\uffd6\056\uffd6\001\002\000" +
    "\034\002\uffc3\003\uffc3\004\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\025\uffc3\051\uffc3\052\uffc3\055\uffc3\056" +
    "\uffc3\001\002\000\032\003\uffd0\004\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\025\uffd0\051\uffd0\052\uffd0\055" +
    "\uffd0\056\uffd0\001\002\000\032\003\uffb2\004\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\051\uffb2\052" +
    "\uffb2\055\uffb2\056\uffb2\001\002\000\026\003\uffbd\004\uffbd" +
    "\017\uffbd\021\uffbd\022\uffbd\023\uffbd\025\uffbd\051\uffbd\052" +
    "\uffbd\056\uffbd\001\002\000\004\044\174\001\002\000\032" +
    "\003\uffd8\004\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\025\uffd8\051\uffd8\052\uffd8\055\uffd8\056\uffd8\001\002" +
    "\000\030\003\uffbf\004\uffbf\017\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\025\uffbf\051\uffbf\052\uffbf\055\173\056\uffbf\001\002" +
    "\000\026\003\uffbe\004\uffbe\017\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\025\uffbe\051\uffbe\052\uffbe\056\uffbe\001\002\000\026" +
    "\004\005\005\035\006\036\007\046\010\033\011\040\025" +
    "\031\027\027\033\044\047\037\001\002\000\066\003\uffb3" +
    "\004\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025" +
    "\uffb3\026\053\027\050\030\060\031\051\032\056\034\062" +
    "\035\064\036\055\037\061\040\047\041\063\042\052\043" +
    "\057\045\054\051\uffb3\052\uffb3\055\uffb3\056\uffb3\001\002" +
    "\000\026\004\005\005\035\006\036\007\046\010\033\011" +
    "\040\025\031\027\027\033\044\047\037\001\002\000\010" +
    "\012\024\013\023\014\200\001\002\000\006\012\204\013" +
    "\203\001\002\000\006\044\uffb1\045\uffb1\001\002\000\006" +
    "\044\uffb4\045\026\001\002\000\006\044\uffb5\045\uffb5\001" +
    "\002\000\006\044\uffb6\045\uffb6\001\002\000\066\003\uffa4" +
    "\004\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\025" +
    "\uffa4\026\053\027\050\030\060\031\051\032\056\034\062" +
    "\035\064\036\055\037\061\040\047\041\063\042\052\043" +
    "\057\045\054\051\uffa4\052\uffa4\055\uffa4\056\uffa4\001\002" +
    "\000\034\002\uffc2\003\uffc2\004\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\025\uffc2\051\uffc2\052\uffc2\055\uffc2" +
    "\056\uffc2\001\002\000\006\052\uffc6\055\uffc6\001\002\000" +
    "\006\052\213\055\207\001\002\000\034\002\uffc1\003\uffc1" +
    "\004\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\025" +
    "\uffc1\051\uffc1\052\uffc1\055\uffc1\056\uffc1\001\002\000\026" +
    "\003\uffbc\004\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\025" +
    "\uffbc\051\uffbc\052\uffbc\056\uffbc\001\002\000\034\002\uffc0" +
    "\003\uffc0\004\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\025\uffc0\051\uffc0\052\uffc0\055\uffc0\056\uffc0\001\002" +
    "\000\026\004\005\005\035\006\036\007\046\010\033\011" +
    "\040\025\031\027\027\033\044\047\037\001\002\000\040" +
    "\026\053\027\050\030\060\031\051\032\056\034\062\035" +
    "\064\036\055\037\061\040\047\041\063\042\052\043\057" +
    "\045\054\046\216\001\002\000\006\044\uffa6\045\uffa6\001" +
    "\002\000\026\004\005\005\035\006\036\007\046\010\033" +
    "\011\040\025\031\027\027\033\044\047\037\001\002\000" +
    "\040\026\053\027\050\030\060\031\051\032\056\034\062" +
    "\035\064\036\055\037\061\040\047\041\063\042\052\043" +
    "\057\045\054\050\221\001\002\000\022\003\166\004\005" +
    "\017\151\021\147\022\163\025\031\051\142\056\143\001" +
    "\002\000\032\003\uffcb\004\uffcb\017\uffcb\020\225\021\uffcb" +
    "\022\uffcb\023\uffcb\025\uffcb\051\uffcb\052\uffcb\055\uffcb\056" +
    "\uffcb\001\002\000\032\003\uffcd\004\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\025\uffcd\051\uffcd\052\uffcd\055" +
    "\224\056\uffcd\001\002\000\032\003\uffcc\004\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc\051\uffcc\052" +
    "\uffcc\055\uffcc\056\uffcc\001\002\000\022\003\166\004\005" +
    "\017\151\021\147\022\163\025\031\051\142\056\143\001" +
    "\002\000\032\003\uffca\004\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\025\uffca\051\uffca\052\uffca\055\uffca\056" +
    "\uffca\001\002\000\010\052\uffc8\054\231\055\uffc8\001\002" +
    "\000\044\026\053\027\050\030\060\031\051\032\056\034" +
    "\062\035\064\036\055\037\061\040\047\041\063\042\052" +
    "\043\057\045\054\052\uffc5\054\uffc5\055\uffc5\001\002\000" +
    "\026\004\005\005\035\006\036\007\046\010\033\011\040" +
    "\025\031\027\027\033\044\047\037\001\002\000\044\026" +
    "\053\027\050\030\060\031\051\032\056\034\062\035\064" +
    "\036\055\037\061\040\047\041\063\042\052\043\057\045" +
    "\054\052\uffc4\054\uffc4\055\uffc4\001\002\000\026\004\005" +
    "\005\035\006\036\007\046\010\033\011\040\025\031\027" +
    "\027\033\044\047\037\001\002\000\040\026\053\027\050" +
    "\030\060\031\051\032\056\034\062\035\064\036\055\037" +
    "\061\040\047\041\063\042\052\043\057\045\054\050\235" +
    "\001\002\000\022\003\166\004\005\017\151\021\147\022" +
    "\163\025\031\051\142\056\143\001\002\000\032\003\uffc9" +
    "\004\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\025" +
    "\uffc9\051\uffc9\052\uffc9\055\uffc9\056\uffc9\001\002\000\006" +
    "\004\005\056\243\001\002\000\026\004\005\005\035\006" +
    "\036\007\046\010\033\011\040\025\031\027\027\033\044" +
    "\047\037\001\002\000\066\003\uffa9\004\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\026\053\027\050" +
    "\030\060\031\051\032\056\034\062\035\064\036\055\037" +
    "\061\040\047\041\063\042\052\043\057\045\054\051\uffa9" +
    "\052\uffa9\055\uffa9\056\uffa9\001\002\000\006\044\uffaa\054" +
    "\uffaa\001\002\000\006\044\uffae\054\uffae\001\002\000\006" +
    "\044\uffaf\054\uffaf\001\002\000\026\004\005\005\035\006" +
    "\036\007\046\010\033\011\040\025\031\027\027\033\044" +
    "\047\037\001\002\000\026\004\005\005\035\006\036\007" +
    "\046\010\033\011\040\025\031\027\027\033\044\047\037" +
    "\001\002\000\040\026\053\027\050\030\060\031\051\032" +
    "\056\034\062\035\064\036\055\037\061\040\047\041\063" +
    "\042\052\043\057\045\054\046\250\001\002\000\006\044" +
    "\uffa5\045\uffa5\001\002\000\066\003\uffa3\004\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\026\053\027" +
    "\050\030\060\031\051\032\056\034\062\035\064\036\055" +
    "\037\061\040\047\041\063\042\052\043\057\045\054\051" +
    "\uffa3\052\uffa3\055\uffa3\056\uffa3\001\002\000\006\004\005" +
    "\056\243\001\002\000\006\044\uffab\054\uffab\001\002\000" +
    "\010\045\uffb1\051\uffb1\054\uffb1\001\002\000\010\045\026" +
    "\051\uff9b\054\uff9b\001\002\000\006\050\uff9e\054\uff9e\001" +
    "\002\000\010\004\uffa2\024\uffa2\055\260\001\002\000\006" +
    "\004\uffa1\024\uffa1\001\002\000\004\002\001\001\002\000" +
    "\006\002\uff95\004\uff95\001\002" });
>>>>>>> finals

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\355\000\026\002\007\003\012\013\004\046\015\050" +
    "\006\053\010\054\005\055\003\060\016\061\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\004\046\344\050\006\053\343" +
    "\055\341\060\016\061\013\001\001\000\002\001\001\000" +
    "\004\013\337\001\001\000\022\013\004\046\336\050\006" +
    "\053\335\054\334\055\333\060\016\061\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\020\001\001\000\002\001\001\000" +
    "\004\013\325\001\001\000\020\013\031\044\024\045\027" +
    "\047\026\053\030\056\025\057\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\031\044\313\047\026\053\315\056\025\057" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\312\001\001\000\010\013\163\031\162\042\161\001" +
    "\001\000\006\013\037\036\035\001\001\000\004\040\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\044\006\052\010\054" +
    "\011\046\013\053\016\062\035\066\051\061\052\055\001" +
    "\001\000\022\004\147\006\052\010\054\011\046\013\053" +
    "\016\062\051\061\052\055\001\001\000\002\001\001\000" +
    "\022\004\146\006\052\010\054\011\046\013\053\016\062" +
    "\051\061\052\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\072\006\052\010\054\011\046" +
    "\013\053\016\062\051\061\052\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\131\006\052\010\054\011" +
    "\046\013\053\016\062\051\061\052\055\001\001\000\022" +
    "\004\130\006\052\010\054\011\046\013\053\016\062\051" +
    "\061\052\055\001\001\000\022\004\127\006\052\010\054" +
    "\011\046\013\053\016\062\051\061\052\055\001\001\000" +
    "\022\004\126\006\052\010\054\011\046\013\053\016\062" +
    "\051\061\052\055\001\001\000\022\004\125\006\052\010" +
    "\054\011\046\013\053\016\062\051\061\052\055\001\001" +
    "\000\022\004\123\006\052\010\054\011\046\013\053\016" +
    "\062\051\061\052\055\001\001\000\004\013\122\001\001" +
    "\000\022\004\121\006\052\010\054\011\046\013\053\016" +
    "\062\051\061\052\055\001\001\000\022\004\120\006\052" +
    "\010\054\011\046\013\053\016\062\051\061\052\055\001" +
    "\001\000\022\004\117\006\052\010\054\011\046\013\053" +
    "\016\062\051\061\052\055\001\001\000\022\004\116\006" +
    "\052\010\054\011\046\013\053\016\062\051\061\052\055" +
    "\001\001\000\022\004\115\006\052\010\054\011\046\013" +
    "\053\016\062\051\061\052\055\001\001\000\022\004\114" +
    "\006\052\010\054\011\046\013\053\016\062\051\061\052" +
    "\055\001\001\000\022\004\113\006\052\010\054\011\046" +
    "\013\053\016\062\051\061\052\055\001\001\000\022\004" +
    "\112\006\052\010\054\011\046\013\053\016\062\051\061" +
    "\052\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\133\006\052\010\054\011\046" +
    "\013\053\016\062\051\061\052\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\136\006\052\010\054" +
    "\011\046\013\053\016\062\043\137\051\061\052\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\142" +
    "\006\052\010\054\011\046\013\053\016\062\051\061\052" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\136\006\052\010\054\011\046\013\053\016\062\043" +
    "\144\051\061\052\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\153\006\052\010\054\011\046\012\155" +
    "\013\053\016\062\051\061\052\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\160\006\052\010\054\011\046\013\053\016" +
    "\062\051\061\052\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\037\036\165\001\001\000\004\040\166" +
    "\001\001\000\002\001\001\000\006\013\163\031\311\001" +
    "\001\000\004\037\171\001\001\000\004\025\176\001\001" +
    "\000\006\013\037\036\173\001\001\000\004\040\174\001" +
    "\001\000\002\001\001\000\006\013\037\036\307\001\001" +
    "\000\002\001\001\000\052\004\217\006\225\010\054\011" +
    "\046\013\214\014\200\016\062\017\224\021\222\022\211" +
    "\023\204\025\202\026\212\027\206\031\201\032\223\034" +
    "\213\041\215\051\061\052\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\260\006\052\010\054\011\046\013\053\016\062\024" +
    "\261\051\061\052\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\004\217\006\225\010\054\011\046\013" +
    "\214\014\200\016\062\017\224\021\222\022\211\023\253" +
    "\025\202\027\254\031\201\032\223\034\213\041\215\051" +
    "\061\052\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\227\006\052\010\054\011\046\013\053\016\062\051\061" +
    "\052\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\163\031\235\033\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\237\006\052\010\054\011\046\013\053\016\062" +
    "\051\061\052\055\001\001\000\002\001\001\000\044\004" +
    "\217\006\225\010\054\011\046\013\214\014\200\016\062" +
    "\017\241\021\222\022\211\025\202\031\201\032\223\034" +
    "\213\041\215\051\061\052\203\001\001\000\002\001\001" +
    "\000\010\013\163\031\235\033\245\001\001\000\022\004" +
    "\244\006\052\010\054\011\046\013\053\016\062\051\061" +
    "\052\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\252\006\052\010\054\011\046\013\053\016\062" +
    "\051\061\052\055\001\001\000\022\004\250\006\052\010" +
    "\054\011\046\013\053\016\062\051\061\052\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\263\006\052\010\054\011\046\013\053" +
    "\016\062\051\061\052\055\001\001\000\002\001\001\000" +
    "\022\004\265\006\052\010\054\011\046\013\053\016\062" +
    "\051\061\052\055\001\001\000\002\001\001\000\046\004" +
    "\217\006\225\010\054\011\046\013\214\014\200\016\062" +
    "\017\270\020\267\021\222\022\211\025\202\031\201\032" +
    "\223\034\213\041\215\051\061\052\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\217\006\225\010\054\011\046\013\214\014\200\016\062" +
    "\017\270\020\273\021\222\022\211\025\202\031\201\032" +
    "\223\034\213\041\215\051\061\052\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\300\006\052\010" +
    "\054\011\046\013\053\016\062\051\061\052\055\001\001" +
    "\000\022\004\277\006\052\010\054\011\046\013\053\016" +
    "\062\051\061\052\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\305\006\052\010" +
    "\054\011\046\013\053\016\062\051\061\052\055\001\001" +
    "\000\022\004\304\006\052\010\054\011\046\013\053\016" +
    "\062\051\061\052\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\322\001\001\000\006\013\037\036\320\001\001\000\004" +
    "\040\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\324\006\052\010\054\011\046\013\053\016\062" +
    "\051\061\052\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\031\044\024\045\327\047\026\053\030" +
    "\056\025\057\023\001\001\000\016\013\031\044\313\047" +
    "\026\053\315\056\025\057\023\001\001\000\002\001\001" +
    "\000\022\004\332\006\052\010\054\011\046\013\053\016" +
    "\062\051\061\052\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\351\001\001\000\006\013\037\036\347\001\001" +
    "\000\004\040\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\356\001\001\000\006\013\037\036\354" +
    "\001\001\000\004\040\355\001\001\000\002\001\001\000" +
    "\002\001\001" });
=======
    "\000\260\000\014\002\003\003\011\012\010\046\007\047" +
    "\006\001\001\000\006\012\010\046\261\001\001\000\002" +
    "\001\001\000\004\012\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\010\046\013" +
    "\047\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\017\027\016\043\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\021\001" +
    "\001\000\004\041\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\044\006\041\007" +
    "\027\010\040\012\031\035\033\045\042\001\001\000\016" +
    "\004\130\006\041\007\027\010\040\012\031\045\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\104\006\041\007\027\010\040" +
    "\012\031\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\103" +
    "\006\041\007\027\010\040\012\031\045\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\102\006\041" +
    "\007\027\010\040\012\031\045\042\001\001\000\016\004" +
    "\101\006\041\007\027\010\040\012\031\045\042\001\001" +
    "\000\016\004\100\006\041\007\027\010\040\012\031\045" +
    "\042\001\001\000\016\004\077\006\041\007\027\010\040" +
    "\012\031\045\042\001\001\000\016\004\076\006\041\007" +
    "\027\010\040\012\031\045\042\001\001\000\016\004\074" +
    "\006\041\007\027\010\040\012\031\045\042\001\001\000" +
    "\016\004\073\006\041\007\027\010\040\012\031\045\042" +
    "\001\001\000\016\004\072\006\041\007\027\010\040\012" +
    "\031\045\042\001\001\000\016\004\071\006\041\007\027" +
    "\010\040\012\031\045\042\001\001\000\016\004\070\006" +
    "\041\007\027\010\040\012\031\045\042\001\001\000\016" +
    "\004\067\006\041\007\027\010\040\012\031\045\042\001" +
    "\001\000\016\004\066\006\041\007\027\010\040\012\031" +
    "\045\042\001\001\000\016\004\065\006\041\007\027\010" +
    "\040\012\031\045\042\001\001\000\016\004\064\006\041" +
    "\007\027\010\040\012\031\045\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\110\006\041\007\027\010" +
    "\040\011\112\012\031\045\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\115\006\041\007\027\010\040\012\031\045\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\121\006\041\007\027\010\040\012\031" +
    "\044\120\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\124\006\041\007\027\010\040\012\031" +
    "\045\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\126\006\041\007\027\010\040\012\031\045\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\017\027\255\001\001\000\004\040\133" +
    "\001\001\000\004\023\140\001\001\000\004\036\135\001" +
    "\001\000\004\041\136\001\001\000\002\001\001\000\004" +
    "\036\253\001\001\000\002\001\001\000\044\006\157\012" +
    "\161\013\144\014\153\015\171\017\170\020\143\021\160" +
    "\023\152\024\156\025\166\027\155\030\167\031\151\032" +
    "\154\034\164\042\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\227\006\041\007\027\010\040\012\031" +
    "\022\226\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\006\157\012\161\013\144\014" +
    "\153\015\171\017\170\020\143\021\207\023\152\025\211" +
    "\027\155\030\167\031\151\032\154\034\164\042\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\174\006\041\007\027\010\040\012\031\045\042\001\001" +
    "\000\002\001\001\000\016\004\204\006\041\007\027\010" +
    "\040\012\031\045\042\001\001\000\006\036\021\037\200" +
    "\001\001\000\002\001\001\000\004\041\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\214\006\041\007\027\010\040\012\031\045" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\217\006\041\007\027\010\040\012\031\045\042\001" +
    "\001\000\002\001\001\000\040\006\157\012\161\013\144" +
    "\014\153\015\222\016\221\017\170\020\143\023\152\027" +
    "\155\030\167\031\151\032\154\034\164\042\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\157\012\161\013\144\014\153\015\222\016\225" +
    "\017\170\020\143\023\152\027\155\030\167\031\151\032" +
    "\154\034\164\042\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\231\006\041\007" +
    "\027\010\040\012\031\045\042\001\001\000\002\001\001" +
    "\000\016\004\233\006\041\007\027\010\040\012\031\045" +
    "\042\001\001\000\002\001\001\000\036\006\157\012\161" +
    "\013\144\014\153\015\235\017\170\020\143\023\152\027" +
    "\155\030\167\031\151\032\154\034\164\042\145\001\001" +
    "\000\002\001\001\000\010\012\017\027\243\033\241\001" +
    "\001\000\016\004\240\006\041\007\027\010\040\012\031" +
    "\045\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\250\006\041" +
    "\007\027\010\040\012\031\045\042\001\001\000\016\004" +
    "\246\006\041\007\027\010\040\012\031\045\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\017\027\243\033\252\001\001\000\002\001\001" +
    "\000\004\041\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });
>>>>>>> finals

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



<<<<<<< HEAD
=======
	//NOTE: the two error functions are mutually exclusive  since syntax_error() is throwing exception!
	
>>>>>>> finals
	public void syntax_error(Symbol cur_token){
		Token t = (Token)cur_token.value;
		
		if (t != null){
			throw new CompilationException("Syntax Error: Not expecting token "+t.type()+"("+t.value()+")", t.position());
		}
		else
			throw new CompilationException("Syntax Error: Not expecting EOF", new XiPosition(0,0,0,0));
		
		
	}
	
	public void unrecovered_syntax_error(Symbol cur_token){
		Token t = (Token)cur_token.value;
		report_fatal_error("", t);	
	}
<<<<<<< HEAD
=======

	public void report_fatal_error(String message, Object info){	
		Token t = (Token)info;
		if (t != null){
			throw new CompilationException("Syntax Error: Not expecting token "+t.type()+"("+t.value()+")", t.position());
		}
		else
			throw new CompilationException("Syntax Error: Not expecting EOF", new XiPosition(0,0,0,0));
	}

 	public void debug_message(String mess) {	
 		try{
		//modify default debug message to replace terminal id with token name
	 		if(mess.contains("term #")){
	 			Pattern p=Pattern.compile("([0-9]+)");
		 		Matcher m=p.matcher(mess);
		 		m.find();
		 		int tokid=Integer.parseInt(m.group(0));
		 		String tokname="debug mess error";
		 		for(Field tid : sym.class.getFields()){
		 			if(tid.getInt(tid)==tokid){
		 				tokname=tid.getName();
		 				break;
		 			}
		 		}
				String bettermess=mess.replaceFirst("#[0-9]+",tokname);
				System.err.println(bettermess);
	 		}
			else
	 			System.err.println(mess);
 		}
 		catch(Exception e){
 			System.err.println(mess);
 		}
		
		//System.err.println(mess);
	}
>>>>>>> finals

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public Position span(Position left, Position right){
		return new XiPosition(left.unit(), left.columnStart(), right.columnEnd(), left.lineStart(), right.lineEnd());
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 144: // program ::= program class_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
		program.position = span(p.position(), s.position());
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // program ::= program func_decl 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 108: // program ::= program func_decl 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode p = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
		program.position = span(p.position(), s.position());
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 142: // program ::= program gblvar_list 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> s = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.addAll(s);
		program.position = span(p.position(), ((GblDeclNode)s.get(0)).position());
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // program ::= class_decl 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 107: // program ::= func_decl 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 140: // program ::= func_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // program ::= gblvar_list 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> s = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(((GblDeclNode)s.get(0)).position());
		program.addAll(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // program ::= use_list gblvar_list 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> s = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.addAll(s);
		RESULT = program;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // program ::= use_list class_decl 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 106: // program ::= use_list func_decl 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode p = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
<<<<<<< HEAD
		RESULT = program;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // program ::= use_list func_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
=======
>>>>>>> finals
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 135: // gblid_list ::= gblid_list COMMA id 
            {
              ArrayList<IdNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdNode> list = (ArrayList<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		list.add((IdNode)id);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gblid_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // gblid_list ::= id COMMA id 
            {
              ArrayList<IdNode> RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree id1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ArrayList<IdNode> list = new ArrayList<IdNode>();
		list.add((IdNode)id1);
		list.add((IdNode)id2);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gblid_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // gblvar_decl ::= id COLON type bracket_list 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// check that arr is empty
		GblDeclNode decl = new GblDeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gblvar_decl",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // gblvar_inst ::= gblvar_decl GETS expr 
            {
              AbstractSyntaxTree RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree decl = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// we assume that var_list cannot be empty
		GblDeclNode gdecl = (GblDeclNode)decl;
		gdecl.position = span(decl.position(), e.position());
		gdecl.expr = e;
		gdecl.children.add(e);
		RESULT = gdecl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gblvar_inst",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // gblvar_list ::= gblid_list COLON type bracket_list 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<IdNode> idlist = (ArrayList<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		for (IdNode id : idlist){
			list.add(new GblDeclNode(id, t, arr, id.position()));
		}
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gblvar_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // gblvar_list ::= gblvar_inst 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gblvar_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // gblvar_list ::= gblvar_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gblvar_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // class_decl ::= CLASS id EXTENDS id OPEN_BRACE class_block CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree ex = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> b = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ClassNode class_node = new ClassNode((IdNode)id, span(c.position(), e.position()));
		class_node.children.addAll(b);
		class_node.ex = (IdNode)ex;
		RESULT = class_node;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // class_decl ::= CLASS id OPEN_BRACE class_block CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> b = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ClassNode class_node = new ClassNode((IdNode)id, span(c.position(), e.position()));
		class_node.children.addAll(b);
		RESULT = class_node;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // class_block ::= class_block func_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		list.add(s);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_block",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // class_block ::= class_block varclass_list 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> decls = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		list.addAll(decls);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_block",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // class_block ::= func_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_block",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // class_block ::= varclass_list 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_block",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // varclass_list ::= idclass_list COLON type bracket_list 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<IdNode> idlist = (ArrayList<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		for (IdNode id : idlist){
			list.add(new ClassDeclNode(id, t, arr, id.position()));
		}
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclass_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // varclass_list ::= varclass_inst 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclass_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // varclass_list ::= varclass_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclass_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // varclass_inst ::= varclass_decl GETS expr 
            {
              AbstractSyntaxTree RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree decl = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// we assume that var_list cannot be empty
		ClassDeclNode cdecl = (ClassDeclNode)decl;
		cdecl.position = span(decl.position(), e.position());
		cdecl.expr = e;
		cdecl.children.add(e);
		RESULT = cdecl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclass_inst",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // idclass_list ::= idclass_list COMMA id 
            {
              ArrayList<IdNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdNode> list = (ArrayList<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		list.add((IdNode)id);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idclass_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // idclass_list ::= id COMMA id 
            {
              ArrayList<IdNode> RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree id1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ArrayList<IdNode> list = new ArrayList<IdNode>();
		list.add((IdNode)id1);
		list.add((IdNode)id2);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idclass_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // varclass_decl ::= id COLON type bracket_list 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// check that arr is empty
		ClassDeclNode decl = new ClassDeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclass_decl",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // use_list ::= use_list use_stmt 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 105: // use_list ::= use_list use_stmt 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode l = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)l;
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 114: // use_list ::= use_stmt 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 104: // use_list ::= use_stmt 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 113: // func_decl ::= id OPEN_PAREN func_list CLOSE_PAREN types block 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 103: // func_decl ::= id OPEN_PAREN func_list CLOSE_PAREN types block 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<XiType> types = (ArrayList<XiType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode block = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			FuncDeclNode func_decl = new FuncDeclNode((IdNode)id, list, types, (BlockNode)block, span(id.position(), block.position()));
		RESULT = func_decl; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 112: // types ::= types COMMA type bracket_list 
            {
              ArrayList<XiType> RESULT =null;
=======
          case 102: // types ::= types COMMA type bracket_list 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
>>>>>>> finals
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<XiType> arr = (ArrayList<XiType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> dim = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = arr;
		arr.add(new XiPrimitiveType(type, dim)); 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 111: // types ::= COLON type bracket_list 
            {
              ArrayList<XiType> RESULT =null;
=======
          case 101: // types ::= COLON type bracket_list 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
>>>>>>> finals
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> dim = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
<<<<<<< HEAD
		 RESULT = new ArrayList<XiType>(); RESULT.add(new XiPrimitiveType(type, dim)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
		 RESULT = new ArrayList<XiPrimitiveType>(); RESULT.add(new XiPrimitiveType(type, dim)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 110: // types ::= 
            {
              ArrayList<XiType> RESULT =null;
		 RESULT = new ArrayList<XiType>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 100: // types ::= 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		 RESULT = new ArrayList<XiPrimitiveType>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 109: // func_list ::= func_list COMMA var_decl 
=======
          case 99: // func_list ::= func_list COMMA var_decl 
>>>>>>> finals
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			list.add(s);
		RESULT = list; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 108: // func_list ::= var_decl 
=======
          case 98: // func_list ::= var_decl 
>>>>>>> finals
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 107: // func_list ::= 
=======
          case 97: // func_list ::= 
>>>>>>> finals
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		RESULT = list; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 106: // use_stmt ::= USE id SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 96: // use_stmt ::= USE id SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
<<<<<<< HEAD
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UseNode(id, span(t.position(), id.position()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UseNode(id, span(t.position(), id.position()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 105: // use_stmt ::= USE id 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 95: // use_stmt ::= USE id 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UseNode(id, span(t.position(), id.position()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UseNode(id, span(t.position(), id.position()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 104: // var_set ::= id_brackets GETS expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 94: // var_set ::= id_brackets GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 103: // var_set ::= attr GETS expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 93: // var_set ::= id GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 102: // var_set ::= id GETS expr 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // id_brackets ::= id_brackets OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 92: // id_brackets ::= id_brackets OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode i = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ListIndexNode base = (ListIndexNode)id;
	   RESULT = new ListIndexNode(base, i, span(base.position(), t.position())); 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 100: // id_brackets ::= attr OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 91: // id_brackets ::= allowed_element_assign OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode i = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListIndexNode(id, i, span(id.position(), t.position())); 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 99: // id_brackets ::= func_call OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListIndexNode(id, i, span(id.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // id_brackets ::= id OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListIndexNode(id, i, span(id.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // allowed_element_assign ::= func_call 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allowed_element_assign",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 90: // allowed_element_assign ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allowed_element_assign",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 96: // allowed_element_assign ::= id 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allowed_element_assign",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 89: // allowed_element_assign ::= id 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allowed_element_assign",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 95: // var_inst ::= var_list GETS expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 88: // var_inst ::= var_list GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// we assume that var_list cannot be empty
		AbstractSyntaxNode n = (AbstractSyntaxNode)(list.get(0));
		InstNode inst = new InstNode(list, e, span(n.position(), e.position()));
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_inst",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 94: // var_list ::= var_list COMMA var_item 
=======
          case 87: // var_list ::= var_list COMMA var_item 
>>>>>>> finals
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			list.add(s);
		RESULT = list; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 93: // var_list ::= UNDERSCORE COMMA var_item 
=======
          case 86: // var_list ::= UNDERSCORE COMMA var_item 
>>>>>>> finals
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(new UnderscoreNode(t.position()));
		list.add(s);
		RESULT = list; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 92: // var_list ::= UNDERSCORE 
=======
          case 85: // var_list ::= UNDERSCORE 
>>>>>>> finals
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(new UnderscoreNode(t.position()));
		RESULT = list;
	
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 91: // var_list ::= var_decl 
=======
          case 84: // var_list ::= var_decl 
>>>>>>> finals
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 90: // var_item ::= UNDERSCORE 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 83: // var_item ::= UNDERSCORE 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnderscoreNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_item",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 89: // var_item ::= var_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
          case 82: // var_item ::= var_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_item",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 88: // bracket_list ::= bracket_list OPEN_BRACKET dimension CLOSE_BRACKET 
=======
          case 81: // bracket_list ::= bracket_list OPEN_BRACKET dimension CLOSE_BRACKET 
>>>>>>> finals
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode t = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	if (arr == null) arr = new ArrayList<VisualizableTreeNode>();
		arr.add(t);
		RESULT = arr; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 87: // bracket_list ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 80: // bracket_list ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 86: // var_decl ::= id COLON type bracket_list 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 79: // final_var_init ::= error 
            {
              AbstractSyntaxNode RESULT =null;
		 
		  RESULT= new ErrorNode(null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_var_init",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // final_var_init ::= final_var_decl GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int fvdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fvdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode fvd = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<VisualizableTreeNode> list= new ArrayList<VisualizableTreeNode>();
		  ((DeclNode)fvd).setInitialValue(e);
		  list.add(fvd);
		  InstNode inst = new InstNode(list, e, span(fvd.position(), e.position()));
		  RESULT=inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_var_init",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // final_var_decl ::= id COLON final_type bracket_list 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		DeclNode decl = new DeclNode((IdNode)id, t, arr,id.position());
		  RESULT = decl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_var_decl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // final_type ::= FINAL BOOL 
            {
              String RESULT =null;
		int token1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int token1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token token2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= token1.value()+" "+token2.value();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // final_type ::= FINAL INT 
            {
              String RESULT =null;
		int token1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int token1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token token2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= token1.value()+" "+token2.value();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // var_decl ::= id COLON type bracket_list 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// check that arr is empty
		DeclNode decl = new DeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 85: // dimension ::= expr 
            {
              AbstractSyntaxTree RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree o = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
          case 73: // dimension ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode o = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 84: // dimension ::= 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 72: // dimension ::= 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 83: // type ::= id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ((IdNode)id).id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type ::= BOOL 
=======
          case 71: // type ::= BOOL 
>>>>>>> finals
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o.value(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 81: // type ::= INT 
=======
          case 70: // type ::= INT 
>>>>>>> finals
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o.value(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 80: // stmt_list ::= stmt_list block_stmt 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 69: // stmt_list ::= stmt_list block_stmt 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode list = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)list;
		block.add(s);
		RESULT = block; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 79: // stmt_list ::= block_stmt 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 68: // stmt_list ::= block_stmt 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = new BlockNode(null);
		block.add(s);
		RESULT = block; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 78: // block_stmt ::= stmt SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 67: // block_stmt ::= stmt SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 77: // block_stmt ::= stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 66: // block_stmt ::= stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 76: // block ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 65: // block ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode stmts = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)stmts;
		block.position = span(t.position(), e.position()); 
		block.add(s);
		RESULT = block; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 75: // block ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 64: // block ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode stmts = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)stmts;
		block.position = span(t.position(), e.position()); 
		RESULT = block; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 74: // block ::= OPEN_BRACE return_stmt CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 63: // block ::= OPEN_BRACE return_stmt CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockNode(span(t.position(), e.position())); 
	   ((BlockNode)RESULT).add(s); 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 73: // block ::= OPEN_BRACE CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 62: // block ::= OPEN_BRACE CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockNode(span(t.position(), e.position())); 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 72: // return_list ::= return_list COMMA expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 61: // return_list ::= return_list COMMA expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode list = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = (ReturnNode)list;
		r.add(expr); 
		r.position = span(r.position, expr.position());
		RESULT = r; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 71: // return_list ::= expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 60: // return_list ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = new ReturnNode();
		r.add(expr);
		r.position = expr.position();
		RESULT = r; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 70: // return_stmt ::= return_stmt SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 59: // return_stmt ::= return_stmt SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 69: // return_stmt ::= RETURN 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 58: // return_stmt ::= RETURN 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ReturnNode r = new ReturnNode(); 
		r.position = t.position(); 
		RESULT = r; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 68: // return_stmt ::= RETURN return_list 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 57: // return_stmt ::= RETURN return_list 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = (ReturnNode)s; 
		r.position = span(t.position(), s.position()); 
		RESULT = r; 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 67: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 56: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileNode(e, s, span(t.position(), s.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileNode(e, s, span(t.position(), s.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 66: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt_w_semi ELSE stmt_w_semi 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 55: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt_w_semi ELSE stmt_w_semi 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode s1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree s2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(e, s1, s2, span(t.position(), s2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
		AbstractSyntaxNode s2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(e, s1, s2, span(t.position(), s2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 65: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt_w_semi 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 54: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt_w_semi 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree stmt = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(e1, stmt, null, span(t.position(), stmt.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(e1, stmt, null, span(t.position(), stmt.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 64: // stmt_w_semi ::= stmt SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree stmt = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_w_semi",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 53: // stmt_w_semi ::= stmt SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_w_semi",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 63: // stmt_w_semi ::= stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree stmt = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_w_semi",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 52: // stmt_w_semi ::= stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_w_semi",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 62: // stmt_or_block ::= block 
            {
              AbstractSyntaxTree RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree stmt = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_or_block",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 51: // stmt_or_block ::= block 
            {
              AbstractSyntaxNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_or_block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 61: // stmt_or_block ::= stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree stmt = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_or_block",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 50: // stmt_or_block ::= stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_or_block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 60: // stmt ::= var_set 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 49: // stmt ::= var_set 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 59: // stmt ::= var_inst 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 48: // stmt ::= var_inst 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 58: // stmt ::= var_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 47: // stmt ::= var_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 57: // stmt ::= block 
            {
              AbstractSyntaxTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree b = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 46: // stmt ::= final_var_init 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= block 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode b = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 56: // stmt ::= func_call 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcedureCallNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 44: // stmt ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcedureCallNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 55: // stmt ::= BREAK 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 43: // stmt ::= BREAK 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BreakNode(b.position()); 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 54: // stmt ::= while_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 42: // stmt ::= while_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 53: // stmt ::= if_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 41: // stmt ::= if_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 52: // arr_elements ::= arr_elements COMMA expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 40: // arr_elements ::= arr_elements COMMA expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode arr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ListNode)arr).add(expr); RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ListNode)arr).add(expr); RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 51: // arr_elements ::= expr 
            {
              AbstractSyntaxTree RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ListNode list = new ListNode(expr.position()); list.add(expr); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 39: // arr_elements ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ListNode list = new ListNode(expr.position()); list.add(expr); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 50: // arr_create ::= OPEN_PAREN expr COMMA arr_elements CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 38: // arr_create ::= OPEN_PAREN expr COMMA arr_elements CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode arr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token t = (Token)o, t2 = (Token)e; 
		ListNode list = new ListNode(span(o.position(), e.position())); 
		list.add(expr);
		RESULT = list;
		ListNode tl = (ListNode)arr;
		for (VisualizableTreeNode n : tl.children()) list.add((AbstractSyntaxNode)n);
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 49: // arr_create ::= OPEN_PAREN expr COMMA CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 37: // arr_create ::= OPEN_PAREN expr COMMA CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token t = (Token)o, t2 = (Token)e; 
		ListNode list = new ListNode(span(o.position(), e.position())); 
		list.add(expr);
		RESULT = list;
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 48: // arr_create ::= OPEN_PAREN CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 36: // arr_create ::= OPEN_PAREN CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token t = (Token)o, t2 = (Token)e; RESULT = new ListNode(span(o.position(), e.position())); 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 47: // arr_index ::= expr OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 35: // arr_index ::= expr OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode i = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListIndexNode(expr, i, span(expr.position(), t.position())); 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_index",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_index",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 46: // func_callargs ::= func_callargs COMMA expr 
=======
          case 34: // func_callargs ::= func_callargs COMMA expr 
>>>>>>> finals
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> args = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 45: // func_callargs ::= expr 
=======
          case 33: // func_callargs ::= expr 
>>>>>>> finals
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<VisualizableTreeNode> args = new ArrayList<VisualizableTreeNode>(); args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<VisualizableTreeNode> args = new ArrayList<VisualizableTreeNode>(); args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 44: // func_callargs ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
          case 32: // func_callargs ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 43: // func_call ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 31: // func_call ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int lenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token len = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token t1 = (Token)len, t2 = (Token)o;
		RESULT = new LengthNode(expr, span(t1.position(), t2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 42: // func_call ::= id OPEN_PAREN func_callargs CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 30: // func_call ::= id OPEN_PAREN func_callargs CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> args = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token t = (Token)o;
<<<<<<< HEAD
		RESULT = new FuncCallNode(id, args, span(id.position(), t.position())); 
=======
		RESULT = new FuncCallNode((IdNode)id, args, span(id.position(), t.position())); 
>>>>>>> finals
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 41: // uop ::= MINUS 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 29: // uop ::= MINUS 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNegNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 40: // uop ::= NOT 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 28: // uop ::= NOT 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNotNode(t.position());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 39: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
=======
          case 27: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
>>>>>>> finals
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 38: // expr ::= NEW id 
            {
              AbstractSyntaxTree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NewNode((IdNode)id, span(n.position(), id.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= attr OPEN_PAREN func_callargs CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree attr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> args = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncCallNode(attr, args, span(attr.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= attr 
            {
              AbstractSyntaxTree RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree attr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = attr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= usable_id 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
          case 26: // expr ::= id 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 34: // expr ::= NULL 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NullNode(t.position());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= arr_create 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
          case 25: // expr ::= arr_create 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 32: // expr ::= arr_index 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
          case 24: // expr ::= arr_index 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 31: // expr ::= bool_literal 
            {
              AbstractSyntaxTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree b = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
          case 23: // expr ::= bool_literal 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode b = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 30: // expr ::= STRING_LITERAL 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 22: // expr ::= STRING_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token tok = (Token)s;
		Position p = tok.position();
		RESULT = new StringLiteralNode(tok.value(), p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 29: // expr ::= CHARACTER_LITERAL 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 21: // expr ::= CHARACTER_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Token tok = (Token)o;
		int v = (int)(tok.value().charAt(0));
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 28: // expr ::= INTEGER_LITERAL 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 20: // expr ::= INTEGER_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Token tok = (Token)o;
		long v = Long.parseLong(tok.value());
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 27: // expr ::= func_call 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
          case 19: // expr ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 26: // expr ::= MINUS expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 18: // expr ::= MINUS expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = new UnNegNode(t.position()); ((UnNegNode)RESULT).set(e, span(RESULT.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 25: // expr ::= NOT expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 17: // expr ::= NOT expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
<<<<<<< HEAD
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
=======
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
>>>>>>> finals
		 RESULT = new UnNotNode(t.position()); ((UnNotNode)RESULT).set(e, span(RESULT.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 24: // expr ::= expr MODULO expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 16: // expr ::= expr MODULO expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("MODULO");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 23: // expr ::= expr DIVIDE expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 15: // expr ::= expr DIVIDE expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("DIVIDE");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 22: // expr ::= expr TIMES expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 14: // expr ::= expr TIMES expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("TIMES");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 21: // expr ::= expr MINUS expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 13: // expr ::= expr MINUS expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("MINUS");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 20: // expr ::= expr PLUS expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 12: // expr ::= expr PLUS expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("PLUS");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 19: // expr ::= expr GT expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 11: // expr ::= expr GT expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("GT");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 18: // expr ::= expr LT expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 10: // expr ::= expr LT expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("LT");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 17: // expr ::= expr GEQ expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 9: // expr ::= expr GEQ expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("GEQ");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 16: // expr ::= expr LEQ expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 8: // expr ::= expr LEQ expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("LEQ");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 15: // expr ::= expr NOT_EQUAL expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 7: // expr ::= expr NOT_EQUAL expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("NOT_EQUAL");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 14: // expr ::= expr EQUAL expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 6: // expr ::= expr EQUAL expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("EQUAL");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 13: // expr ::= expr OR expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 5: // expr ::= expr OR expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolOpNode("OR");
      ((BoolOpNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 12: // expr ::= expr AND expr 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 4: // expr ::= expr AND expr 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolOpNode("AND");
      ((BoolOpNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 11: // attr ::= expr PERIOD id 
            {
              AbstractSyntaxTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree b = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AttrNode(a, b, span(a.position(), b.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr_subset ::= OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_subset",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr_subset ::= NEW id 
            {
              AbstractSyntaxTree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_subset",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_subset ::= usable_id 
            {
              AbstractSyntaxTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_subset",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_subset ::= arr_index 
            {
              AbstractSyntaxTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_subset",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_subset ::= func_call 
            {
              AbstractSyntaxTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_subset",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // usable_id ::= THIS 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ThisNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usable_id",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usable_id ::= id 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usable_id",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // id ::= IDENTIFIER 
            {
              AbstractSyntaxTree RESULT =null;
=======
          case 3: // id ::= IDENTIFIER 
            {
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token id = (Token)o;
		RESULT = new IdNode(id.value(), id.position());
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bool_literal ::= FALSE 
            {
<<<<<<< HEAD
              AbstractSyntaxTree RESULT =null;
=======
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteralNode(false, ((Token)b).position()); 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // bool_literal ::= TRUE 
            {
<<<<<<< HEAD
              AbstractSyntaxTree RESULT =null;
=======
              AbstractSyntaxNode RESULT =null;
>>>>>>> finals
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteralNode(true, ((Token)b).position()); 
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> finals
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
<<<<<<< HEAD
		AbstractSyntaxTree start_val = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
=======
		AbstractSyntaxNode start_val = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
>>>>>>> finals
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

